
.data
mmapEr:
                .string "mmap failed\n" # error message string for mmap

form:
                .string "%d\n"          # form string for C printf

formTrue:
                .string "true\n"        # form string for C printf

formFalse:
                .string "false\n"       # form string for C printf

.text

.globl main

main:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-24, %rsp         # allocate space for local variables


                movq %rsp, %rbx         # Saves stack pointer in %rbx
                addq $-96, %rsp         # allocate space for extra intermediate
                                        # stack memory

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq $0, -24(%rbp)      # Initializes result to 0
                movq $0, -16(%rbp)      # Initializes num2 to 0
                movq $0, -8(%rbp)       # Initializes num1 to 0
                movq $3, -32(%rbx)      # Moves integer into reg12
                movq %rbp, %rdx         # preparing for static link computation
                movq -32(%rbx), %rcx    # 
                movq %rcx, -8(%rdx)     # Move param reg12 into ['fun_1_main',
                                        # 'var_0_num1'] (num1)
                movq $5, -48(%rbx)      # Moves integer into reg14
                movq %rbp, %rdx         # preparing for static link computation
                movq -48(%rbx), %rcx    # 
                movq %rcx, -16(%rdx)    # Move param reg14 into ['fun_1_main',
                                        # 'var_1_num2'] (num2)
                                        # CALLER PROLOGUE: empty

                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, -64(%rbx)    # Move param var_0_num1 (num1) into
                                        # reg16
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %rcx    # 
                movq %rcx, -72(%rbx)    # Move param var_1_num2 (num2) into
                                        # reg17
                pushq -72(%rbx)         # push arguement to stack
                pushq -64(%rbx)         # push arguement to stack
                pushq %rbp              # set up static link for inner function
                callq fun_2_addAndMultiply# 
                movq %rax, -80(%rbx)    # Moves the return value from %rax into
                                        # reg18
                popq %rax               # Pops argument from stack
                popq %rax               # Pops argument from stack
                                        # CALLER EPILOGUE: empty

                movq %rbp, %rdx         # preparing for static link computation
                movq -80(%rbx), %rcx    # 
                movq %rcx, -24(%rdx)    # Move param reg18 into ['fun_1_main',
                                        # 'var_2_result'] (result)
                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %rcx    # 
                movq %rcx, -88(%rbx)    # Move param var_2_result (result) into
                                        # reg19
                movq -88(%rbx), %rcx    # Moves reg19 out of the stack for
                                        # print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
end_main:

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                addq $96, %rsp          # deallocate stack space for extra
                                        # intermediate stack memory


                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

fun_2_addAndMultiply:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-16, %rsp         # allocate space for local variables


                movq %rsp, %rbx         # Saves stack pointer in %rbx
                addq $-96, %rsp         # allocate space for extra intermediate
                                        # stack memory

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq $0, -16(%rbp)      # Initializes product to 0
                movq $0, -8(%rbp)       # Initializes sum to 0
                movq %rbp, %rdx         # preparing for static link computation
                movq 24(%rdx), %r9      # Move param param_3_x (x) into reg1
                movq %rbp, %rdx         # preparing for static link computation
                movq 32(%rdx), %r10     # Move param param_4_y (y) into reg2
                movq %r10, %rcx         # Moves reg2 out into %rcx for
                                        # operation
                movq %r9, %rax          # Moves reg1 out into %rax for
                                        # operation
                addq %rcx, %rax         # Operation: reg1 + reg3
                movq %rax, %r11         # Moves result into reg3
                movq %rbp, %rdx         # preparing for static link computation
                movq %r11, -8(%rdx)     # Move param reg3 into
                                        # ['fun_2_addAndMultiply', 'var_5_sum']
                                        # (sum)
                movq %rbp, %rdx         # preparing for static link computation
                movq 24(%rdx), %r13     # Move param param_3_x (x) into reg5
                movq %rbp, %rdx         # preparing for static link computation
                movq 32(%rdx), %r14     # Move param param_4_y (y) into reg6
                movq %r14, %rcx         # Moves reg6 out into %rcx for
                                        # operation
                movq %r13, %rax         # Moves reg5 out into %rax for
                                        # operation
                imulq %rcx, %rax        # Operation: reg5 * reg7
                movq %rax, %r15         # Moves result into reg7
                movq %rbp, %rdx         # preparing for static link computation
                movq %r15, -16(%rdx)    # Move param reg7 into
                                        # ['fun_2_addAndMultiply',
                                        # 'var_6_product'] (product)
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, 0(%rbx)      # Move param var_5_sum (sum) into reg8
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %rcx    # 
                movq %rcx, -8(%rbx)     # Move param var_6_product (product)
                                        # into reg9
                movq -8(%rbx), %rcx     # Moves reg9 out of the stack for
                                        # operation
                movq 0(%rbx), %rax      # Moves reg8 out of the stack for
                                        # operation
                addq %rcx, %rax         # Operation: reg8 + reg10
                movq %rax, -16(%rbx)    # Moves result into reg10
                movq -16(%rbx), %rax    # Moves reg10 out of the stack for
                                        # return
end_fun_2_addAndMultiply:

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                addq $96, %rsp          # deallocate stack space for extra
                                        # intermediate stack memory


                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

mmap_error:
                leaq mmapEr(%rip), %rdi # pass 1. arg in %rdi
                xor %rax, %rax          # no floating point arguments
                callq printf            # calls printf method

                movq $60, %rax          # prepare for exit syscall
                xor %rdi, %rdi          # exit status 0
                syscall                 # exit


