
.data
mmapEr:
                .string "mmap failed\n" # error message string for mmap

form:
                .string "%d\n"          # form string for C printf

formTrue:
                .string "true\n"        # form string for C printf

formFalse:
                .string "false\n"       # form string for C printf

.text

.globl main

main:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-24, %rsp         # allocate space for local variables


                movq %rsp, %rbx         # Saves stack pointer in %rbx
                addq $-96, %rsp         # allocate space for extra intermediate
                                        # stack memory

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq $0, -16(%rbp)      # Initializes b to 0
                movq $0, -8(%rbp)       # Initializes a to 0
                movq $0, -24(%rbp)      # Initializes c to 0
                movq $5, %r9            # Moves integer into reg1
                movq %r9, %rcx          # Moves reg1 out into %rcx for
                                        # allication size
                pushq %rdx              # %rdx is caller save
                pushq %rsi              # %rsi is caller save
                pushq %rdi              # %rdi is caller save
                pushq %r8               # %r8 is caller save
                pushq %r9               # %r9 is caller save
                pushq %r10              # %r10 is caller save
                pushq %r15              # %r15 is caller save
                movq %rcx, %rsi         # moves size form %rxc into %rsi
                movq %rcx, %r15         # moves size form %rxc into %r15
                shlq $3, %rsi           # 
                xorq %rdi, %rdi         # 
                movq $9, %rax           # prepare mmap syscall
                movq $0x3, %rdx         # 
                xorq %r8, %r8           # 
                xorq %r9, %r9           # 
                movq $0x22, %r10        # 
                syscall                 # allocates the memory

                cmpq $-22, %rax         # checks if mmap was successful
                je mmap_error           # jumps to mmap error if not
                movq $0, %r10           # initializes the index
                LBL_0:                  # 
                cmpq %r15, %r10         # if the index is at the end
                je LBL_1                # Jumps to end when all is initializes
                movq $0, (%rax, %r10, 8)# initializes the index
                incq %r10               # increment the index
                jmp LBL_0               # 
                LBL_1:                  # 
                popq %r15               # restore caller save register %r15
                popq %r10               # restore caller save register %r10
                popq %r9                # restore caller save register %r9
                popq %r8                # restore caller save register %r8
                popq %rdi               # restore caller save register %rdi
                popq %rsi               # restore caller save register %rsi
                popq %rdx               # restore caller save register %rdx
                movq %rax, %r10         # Moves new array into reg2
                movq %rbp, %rdx         # preparing for static link computation
                movq %r10, -24(%rdx)    # Move param reg2 into ['fun_1_main',
                                        # 'var_2_c'] (c)
                movq $0, %r12           # Moves integer into reg4
                movq %rbp, %rdx         # preparing for static link computation
                movq %r12, -8(%rdx)     # Move param reg4 into ['fun_1_main',
                                        # 'var_0_a'] (a)
                movq $5, %r14           # Moves integer into reg6
                movq %rbp, %rdx         # preparing for static link computation
                movq %r14, -16(%rdx)    # Move param reg6 into ['fun_1_main',
                                        # 'var_1_b'] (b)
lbl2_while_begin:
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r15     # Move param var_0_a (a) into reg7
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %rcx    # 
                movq %rcx, 0(%rbx)      # Move param var_1_b (b) into reg8
                movq 0(%rbx), %rcx      # Moves reg8 out of the stack for cmp
                movq %r15, %rax         # Moves reg7 out into %rax for cmp
                cmpq %rcx, %rax         # eval reg7 < reg8
                jl lbl0_cmp_true        # Jump if the expression was true
                movq $0, %rax           # Moves false into %rax
                jmp lbl1_cmp_end        # Jump to end of expression
lbl0_cmp_true:
                movq $1, %rax           # Moves true into %rax
lbl1_cmp_end:
                movq %rax, -8(%rbx)     # Moves result into reg9
                movq -8(%rbx), %rcx     # Moves reg9 out of the stack for
                                        # operation
                cmpq $1, %rcx           # Compare: reg9 == true
                jne lbl3_while_end      # Jump to else if false
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, -16(%rbx)    # Move param var_0_a (a) into reg10
                movq $3, -24(%rbx)      # Moves integer into reg11
                movq -24(%rbx), %rcx    # Moves reg11 out of the stack for cmp
                movq -16(%rbx), %rax    # Moves reg10 out of the stack for cmp
                cmpq %rcx, %rax         # eval reg10 == reg11
                je lbl4_cmp_true        # Jump if the expression was true
                movq $0, %rax           # Moves false into %rax
                jmp lbl5_cmp_end        # Jump to end of expression
lbl4_cmp_true:
                movq $1, %rax           # Moves true into %rax
lbl5_cmp_end:
                movq %rax, -32(%rbx)    # Moves result into reg12
                movq -32(%rbx), %rcx    # Moves reg12 out of the stack for
                                        # operation
                cmpq $1, %rcx           # Compare: reg12 == true
                jne lbl6_if_end         # Jump to end if false
                jmp lbl3_while_end      # Break of while
lbl6_if_end:
                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %rcx    # 
                movq %rcx, -40(%rbx)    # Move param var_2_c (c) into reg13
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, -48(%rbx)    # Move param var_0_a (a) into reg14
                movq -40(%rbx), %rax    # Moves reg13 out for indexing in
                movq -48(%rbx), %rcx    # Moves reg14 out for indexing in
                movq (%rax, %rcx, 8), %rax# Gets the index variable into %rax
                movq %rax, -56(%rbx)    # Moves new array into reg15
                movq -56(%rbx), %rcx    # Moves reg15 out of the stack for
                                        # print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, -72(%rbx)    # Move param var_0_a (a) into reg17
                movq $1, -80(%rbx)      # Moves integer into reg18
                movq -80(%rbx), %rcx    # Moves reg18 out of the stack for
                                        # operation
                movq -72(%rbx), %rax    # Moves reg17 out of the stack for
                                        # operation
                addq %rcx, %rax         # Operation: reg17 + reg19
                movq %rax, -88(%rbx)    # Moves result into reg19
                movq %rbp, %rdx         # preparing for static link computation
                movq -88(%rbx), %rcx    # 
                movq %rcx, -8(%rdx)     # Move param reg19 into ['fun_1_main',
                                        # 'var_0_a'] (a)
                jmp lbl2_while_begin    # Jump to start of while
lbl3_while_end:
end_main:

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                addq $96, %rsp          # deallocate stack space for extra
                                        # intermediate stack memory


                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

mmap_error:
                leaq mmapEr(%rip), %rdi # pass 1. arg in %rdi
                xor %rax, %rax          # no floating point arguments
                callq printf            # calls printf method

                movq $60, %rax          # prepare for exit syscall
                xor %rdi, %rdi          # exit status 0
                syscall                 # exit


