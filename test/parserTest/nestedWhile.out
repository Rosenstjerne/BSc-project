
.data
mmapEr:
                .string "mmap failed\n" # error message string for mmap

form:
                .string "%d\n"          # form string for C printf

formTrue:
                .string "true\n"        # form string for C printf

formFalse:
                .string "false\n"       # form string for C printf

.text

.globl main

main:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-16, %rsp         # allocate space for local variables


                movq %rsp, %rbx         # Saves stack pointer in %rbx
                addq $-104, %rsp        # allocate space for extra intermediate
                                        # stack memory

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq $0, -16(%rbp)      # Initializes b to 0
                movq $0, -8(%rbp)       # Initializes a to 0
                movq $0, %r9            # Moves integer into reg1
                movq %rbp, %rdx         # preparing for static link computation
                movq %r9, -8(%rdx)      # Move param reg1 into ['fun_1_main',
                                        # 'var_0_a'] (a)
                movq $5, %r11           # Moves integer into reg3
                movq %rbp, %rdx         # preparing for static link computation
                movq %r11, -16(%rdx)    # Move param reg3 into ['fun_1_main',
                                        # 'var_1_b'] (b)
lbl2_while_begin:
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r12     # Move param var_0_a (a) into reg4
                movq $10, %r13          # Moves integer into reg5
                movq %r13, %rcx         # Moves reg5 out into %rcx for cmp
                movq %r12, %rax         # Moves reg4 out into %rax for cmp
                cmpq %rcx, %rax         # eval reg4 < reg5
                jl lbl0_cmp_true        # Jump if the expression was true
                movq $0, %rax           # Moves false into %rax
                jmp lbl1_cmp_end        # Jump to end of expression
lbl0_cmp_true:
                movq $1, %rax           # Moves true into %rax
lbl1_cmp_end:
                movq %rax, %r14         # Moves reg6 out into %rax for cmp
                movq %r14, %rcx         # Moves reg6 out into %rax for
                                        # operation
                cmpq $1, %rcx           # Compare: reg6 == true
                jne lbl3_while_end      # Jump to else if false
lbl6_while_begin:
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %r15    # Move param var_1_b (b) into reg7
                movq $10, 0(%rbx)       # Moves integer into reg8
                movq 0(%rbx), %rcx      # Moves reg8 out of the stack for cmp
                movq %r15, %rax         # Moves reg7 out into %rax for cmp
                cmpq %rcx, %rax         # eval reg7 < reg8
                jl lbl4_cmp_true        # Jump if the expression was true
                movq $0, %rax           # Moves false into %rax
                jmp lbl5_cmp_end        # Jump to end of expression
lbl4_cmp_true:
                movq $1, %rax           # Moves true into %rax
lbl5_cmp_end:
                movq %rax, -8(%rbx)     # Moves result into reg9
                movq -8(%rbx), %rcx     # Moves reg9 out of the stack for
                                        # operation
                cmpq $1, %rcx           # Compare: reg9 == true
                jne lbl7_while_end      # Jump to else if false
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, -16(%rbx)    # Move param var_0_a (a) into reg10
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %rcx    # 
                movq %rcx, -24(%rbx)    # Move param var_1_b (b) into reg11
                movq -24(%rbx), %rcx    # Moves reg11 out of the stack for
                                        # operation
                movq -16(%rbx), %rax    # Moves reg10 out of the stack for
                                        # operation
                addq %rcx, %rax         # Operation: reg10 + reg12
                movq %rax, -32(%rbx)    # Moves result into reg12
                movq -32(%rbx), %rcx    # Moves reg12 out of the stack for
                                        # print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %rcx    # 
                movq %rcx, -48(%rbx)    # Move param var_1_b (b) into reg14
                movq $1, -56(%rbx)      # Moves integer into reg15
                movq -56(%rbx), %rcx    # Moves reg15 out of the stack for
                                        # operation
                movq -48(%rbx), %rax    # Moves reg14 out of the stack for
                                        # operation
                addq %rcx, %rax         # Operation: reg14 + reg16
                movq %rax, -64(%rbx)    # Moves result into reg16
                movq %rbp, %rdx         # preparing for static link computation
                movq -64(%rbx), %rcx    # 
                movq %rcx, -16(%rdx)    # Move param reg16 into ['fun_1_main',
                                        # 'var_1_b'] (b)
                jmp lbl6_while_begin    # Jump to start of while
lbl7_while_end:
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %rcx     # 
                movq %rcx, -80(%rbx)    # Move param var_0_a (a) into reg18
                movq $1, -88(%rbx)      # Moves integer into reg19
                movq -88(%rbx), %rcx    # Moves reg19 out of the stack for
                                        # operation
                movq -80(%rbx), %rax    # Moves reg18 out of the stack for
                                        # operation
                addq %rcx, %rax         # Operation: reg18 + reg20
                movq %rax, -96(%rbx)    # Moves result into reg20
                movq %rbp, %rdx         # preparing for static link computation
                movq -96(%rbx), %rcx    # 
                movq %rcx, -8(%rdx)     # Move param reg20 into ['fun_1_main',
                                        # 'var_0_a'] (a)
                jmp lbl2_while_begin    # Jump to start of while
lbl3_while_end:
end_main:

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                addq $104, %rsp         # deallocate stack space for extra
                                        # intermediate stack memory


                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

mmap_error:
                leaq mmapEr(%rip), %rdi # pass 1. arg in %rdi
                xor %rax, %rax          # no floating point arguments
                callq printf            # calls printf method

                movq $60, %rax          # prepare for exit syscall
                xor %rdi, %rdi          # exit status 0
                syscall                 # exit


