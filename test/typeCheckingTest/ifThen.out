
.data
mmapEr:
                .string "mmap failed\n" # error message string for mmap

form:
                .string "%d\n"          # form string for C printf

formTrue:
                .string "true\n"        # form string for C printf

formFalse:
                .string "false\n"       # form string for C printf

.text

.globl main

main:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-24, %rsp         # allocate space for local variables


                movq %rsp, %rbx         # Saves stack pointer in %rbx
                addq $0, %rsp           # allocate space for extra intermediate
                                        # stack memory

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq $0, -16(%rbp)      # Initializes b2 to 0
                movq $0, -8(%rbp)       # Initializes b1 to 0
                movq $0, -24(%rbp)      # Initializes a to 0
                movq $4, %r8            # Moves integer into reg1
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -24(%rdx)     # Move param reg1 into ['fun_1_main',
                                        # 'var_2_a'] (a)
                movq $1, %r8            # Moves boolean into reg3
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -8(%rdx)      # Move param reg3 into ['fun_1_main',
                                        # 'var_0_b1'] (b1)
                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %r8     # Move param var_2_a (a) into reg5
                movq $2, %r9            # Moves integer into reg6
                movq %r9, %rcx          # Moves reg6 out into %rcx for cmp
                movq %r8, %rax          # Moves reg5 out into %rax for cmp
                cmpq %rcx, %rax         # eval reg5 <= reg6
                jle lbl0_cmp_true       # Jump if the expression was true
                movq $0, %rax           # Moves false into %rax
                jmp lbl1_cmp_end        # Jump to end of expression
lbl0_cmp_true:
                movq $1, %rax           # Moves true into %rax
lbl1_cmp_end:
                movq %rax, %r10         # Moves reg7 out into %rax for cmp
                movq %rbp, %rdx         # preparing for static link computation
                movq %r10, -16(%rdx)    # Move param reg7 into ['fun_1_main',
                                        # 'var_1_b2'] (b2)
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r8      # Move param var_0_b1 (b1) into reg8
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %r9     # Move param var_1_b2 (b2) into reg9
                movq %r9, %rcx          # Moves reg9 out into %rcx for
                                        # operation
                movq %r8, %rax          # Moves reg8 out into %rax for
                                        # operation
                orq %rcx, %rax          # Operation: reg8 || reg10
                movq %rax, %r10         # Moves result into reg10
                movq %r10, %rcx         # Moves reg10 out into %rax for
                                        # operation
                cmpq $1, %rcx           # Compare: reg10 == true
                jne lbl2_if_end         # Jump to end if false
                movq $7, %r8            # Moves integer into reg12
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -24(%rdx)     # Move param reg12 into ['fun_1_main',
                                        # 'var_2_a'] (a)
lbl2_if_end:
                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %r8     # Move param var_2_a (a) into reg13
                movq %r8, %rcx          # Moves reg13 out into %rcx for print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
                movq %rbp, %rdx         # preparing for static link computation
                movq -16(%rdx), %r8     # Move param var_1_b2 (b2) into reg14
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r9      # Move param var_0_b1 (b1) into reg15
                movq %r9, %rcx          # Moves reg15 out into %rcx for
                                        # operation
                movq %r8, %rax          # Moves reg14 out into %rax for
                                        # operation
                andq %rcx, %rax         # Operation: reg14 && reg16
                movq %rax, %r10         # Moves result into reg16
                movq %r10, %rcx         # Moves reg16 out into %rax for
                                        # operation
                cmpq $1, %rcx           # Compare: reg16 == true
                jne lbl3_if_else_else   # Jump to else if false
                movq $8, %r8            # Moves integer into reg18
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -24(%rdx)     # Move param reg18 into ['fun_1_main',
                                        # 'var_2_a'] (a)
                jmp lbl4_if_else_end    # Jump to end
lbl3_if_else_else:
                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %r8     # Move param var_2_a (a) into reg20
                movq $7, %r9            # Moves integer into reg21
                movq %r9, %rcx          # Moves reg21 out into %rcx for
                                        # operation
                movq %r8, %rax          # Moves reg20 out into %rax for
                                        # operation
                addq %rcx, %rax         # Operation: reg20 + reg22
                movq %rax, %r11         # Moves result into reg22
                movq %rbp, %rdx         # preparing for static link computation
                movq %r11, -24(%rdx)    # Move param reg22 into ['fun_1_main',
                                        # 'var_2_a'] (a)
lbl4_if_else_end:
                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %r8     # Move param var_2_a (a) into reg23
                movq %r8, %rcx          # Moves reg23 out into %rcx for print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
end_main:

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                addq $0, %rsp           # deallocate stack space for extra
                                        # intermediate stack memory


                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call


mmap_error:
                leaq mmapEr(%rip), %rdi # pass 1. arg in %rdi
                xor %rax, %rax          # no floating point arguments
                callq printf            # calls printf method

                movq $60, %rax          # prepare for exit syscall
                xor %rdi, %rdi          # exit status 0
                syscall                 # exit


