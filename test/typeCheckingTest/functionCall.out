
.data
mmapEr:
                .string "mmap failed\n" # error message string for mmap

form:
                .string "%d\n"          # form string for C printf

formTrue:
                .string "true\n"        # form string for C printf

formFalse:
                .string "false\n"       # form string for C printf

.text

.globl main

main:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-32, %rsp         # allocate space for local variables


                movq %rsp, %rbx         # Saves stack pointer in %rbx
                addq $0, %rsp           # allocate space for extra intermediate
                                        # stack memory

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq $0, -8(%rbp)       # Initializes b to 0
                movq $0, -24(%rbp)      # Initializes j to 0
                movq $0, -16(%rbp)      # Initializes i to 0
                movq $0, -32(%rbp)      # Initializes t to 0
                movq $1, %r8            # Moves integer into reg19
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -16(%rdx)     # Move param reg19 into ['fun_1_main',
                                        # 'var_1_i'] (i)
                movq $2, %r8            # Moves integer into reg21
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -24(%rdx)     # Move param reg21 into ['fun_1_main',
                                        # 'var_2_j'] (j)
                movq $1, %r8            # Moves boolean into reg23
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -8(%rdx)      # Move param reg23 into ['fun_1_main',
                                        # 'var_0_b'] (b)

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save


                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq %rbp, %rdx         # preparing for static link computation
                movq -24(%rdx), %r8     # Move param var_2_j (j) into reg25
                movq $1, %r9            # Moves integer into reg26
                movq %r9, %rcx          # Moves reg26 out into %rcx for
                                        # operation
                movq %r8, %rax          # Moves reg25 out into %rax for
                                        # operation
                addq %rcx, %rax         # Operation: reg25 + reg27
                movq %rax, %r10         # Moves result into reg27
                pushq %r10              # push arguement to stack
                pushq %rbp              # set up static link for inner function
                callq fun_4_inc         # 
                popq %rcx               # Pops parent base pointer from stack
                popq %rcx               # Pops argument from stack

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                movq %rax, %r8          # Moves the return value from %rax into
                                        # reg28
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r9      # Move param var_0_b (b) into reg29
                pushq %r9               # push arguement to stack
                pushq %r8               # push arguement to stack
                pushq %rbp              # set up static link for inner function
                callq fun_3_f2          # 
                popq %rcx               # Pops parent base pointer from stack
                popq %rcx               # Pops argument from stack
                popq %rcx               # Pops argument from stack

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                movq %rax, %r8          # Moves the return value from %rax into
                                        # reg30
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -32(%rdx)     # Move param reg30 into ['fun_1_main',
                                        # 'var_3_t'] (t)

                pushq %r8               # %r8 is callee save
                pushq %r9               # %r9 is callee save
                pushq %r10              # %r10 is callee save
                pushq %r11              # %r11 is callee save
                pushq %r12              # %r12 is callee save
                pushq %r13              # %r13 is callee save
                pushq %r14              # %r14 is callee save
                pushq %r15              # %r15 is callee save

                movq %rbp, %rdx         # preparing for static link computation
                movq -32(%rdx), %r8     # Move param var_3_t (t) into reg31
                movq $0, %r9            # Moves boolean into reg32
                pushq %r9               # push arguement to stack
                pushq %r8               # push arguement to stack
                pushq %rbp              # set up static link for inner function
                callq fun_2_f1          # 
                popq %rcx               # Pops parent base pointer from stack
                popq %rcx               # Pops argument from stack
                popq %rcx               # Pops argument from stack

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                movq %rax, %r8          # Moves the return value from %rax into
                                        # reg33
end_main:

                popq %r15               # restore callee save register %r15
                popq %r14               # restore callee save register %r14
                popq %r13               # restore callee save register %r13
                popq %r12               # restore callee save register %r12
                popq %r11               # restore callee save register %r11
                popq %r10               # restore callee save register %r10
                popq %r9                # restore callee save register %r9
                popq %r8                # restore callee save register %r8

                addq $0, %rsp           # deallocate stack space for extra
                                        # intermediate stack memory


                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

fun_2_f1:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $0, %rsp           # allocate space for local variables

                movq %rbp, %rdx         # preparing for static link computation
                movq 24(%rdx), %r8      # Move param param_4_thingy (thingy)
                                        # into reg0
                movq %r8, %rcx          # Moves reg0 out for indexing
                movq 8(%rcx), %rax      # Gets the dot variable into %rax
                movq %rax, %r9          # Moves new array into reg1
                movq %rbp, %rdx         # preparing for static link computation
                movq 32(%rdx), %r8      # Move param param_5_compare (compare)
                                        # into reg2
                movq %r8, %rcx          # Moves reg2 out into %rcx for cmp
                movq %r9, %rax          # Moves reg1 out into %rax for cmp
                cmpq %rcx, %rax         # eval reg1 == reg2
                je lbl0_cmp_true        # Jump if the expression was true
                movq $0, %rax           # Moves false into %rax
                jmp lbl1_cmp_end        # Jump to end of expression
lbl0_cmp_true:
                movq $1, %rax           # Moves true into %rax
lbl1_cmp_end:
                movq %rax, %r10         # Moves reg3 out into %rax for cmp
                movq %r10, %rcx         # Moves reg3 out into %rax for
                                        # operation
                cmpq $1, %rcx           # Compare: reg3 == true
                jne lbl2_if_else_else   # Jump to else if false
                movq $3, %r8            # Moves integer into reg4
                movq %r8, %rcx          # Moves reg4 out into %rcx for print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
                jmp lbl3_if_else_end    # Jump to end
lbl2_if_else_else:
                movq $5, %r8            # Moves integer into reg5
                movq %r8, %rcx          # Moves reg5 out into %rcx for print
                                        # PRINTING
                leaq form(%rip), %rdi   # pass 1. argument in %rdi
                movq %rcx, %rsi         # Moves printable object to rsi
                xorq %rax, %rax         # No floating point arguments

                callq printf@plt        # calls the printf method
                                        # END OF PRINTING
lbl3_if_else_end:
end_fun_2_f1:

                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

fun_3_f2:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $-8, %rsp          # allocate space for local variables

                movq $0, -8(%rbp)       # Initializes thing to 0
                movq $2, %rcx           # Moves size out into %rcx for
                                        # allication
                pushq %rdx              # %rdx is caller save
                pushq %rsi              # %rsi is caller save
                pushq %rdi              # %rdi is caller save
                pushq %r8               # %r8 is caller save
                pushq %r9               # %r9 is caller save
                pushq %r10              # %r10 is caller save
                pushq %r15              # %r15 is caller save

                movq %rcx, %rsi         # moves size form %rxc into %rsi
                movq %rcx, %r15         # moves size form %rxc into %r15
                shlq $3, %rsi           # 
                xorq %rdi, %rdi         # 
                movq $9, %rax           # prepare mmap syscall
                movq $0x3, %rdx         # 
                xorq %r8, %r8           # 
                xorq %r9, %r9           # 
                movq $0x22, %r10        # 
                syscall                 # allocates the memory

                cmpq $-22, %rax         # checks if mmap was successful
                je mmap_error           # jumps to mmap error if not

                movq $0, %r10           # initializes the index
LBL_0:
                cmpq %r15, %r10         # if the index is at the end
                je LBL_1                # Jumps to end when all is initializes
                movq $0, (%rax, %r10, 8)# initializes the index
                incq %r10               # increment the index
                jmp LBL_0               # 
LBL_1:

                popq %r15               # restore caller save register %r15
                popq %r10               # restore caller save register %r10
                popq %r9                # restore caller save register %r9
                popq %r8                # restore caller save register %r8
                popq %rdi               # restore caller save register %rdi
                popq %rsi               # restore caller save register %rsi
                popq %rdx               # restore caller save register %rdx
                movq %rax, %r8          # Moves new array into reg7
                movq %rbp, %rdx         # preparing for static link computation
                movq %r8, -8(%rdx)      # Move param reg7 into ['fun_3_f2',
                                        # 'var_8_thing'] (thing)
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r8      # Move param var_8_thing (thing) into
                                        # reg8
                movq %rbp, %rdx         # preparing for static link computation
                movq 24(%rdx), %r9      # Move param param_6_id (id) into reg10
                movq %r9, %rcx          # Moves reg10 out for insert
                movq %r8, %rax          # Moves reg8 for indexing
                movq %rcx, 0(%rax)      # Moves reg10 into the dot variable
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r8      # Move param var_8_thing (thing) into
                                        # reg11
                movq %rbp, %rdx         # preparing for static link computation
                movq 32(%rdx), %r9      # Move param param_7_good (good) into
                                        # reg13
                movq %r9, %rcx          # Moves reg13 out for insert
                movq %r8, %rax          # Moves reg11 for indexing
                movq %rcx, 8(%rax)      # Moves reg13 into the dot variable
                movq %rbp, %rdx         # preparing for static link computation
                movq -8(%rdx), %r8      # Move param var_8_thing (thing) into
                                        # reg14
                movq %r8, %rax          # Moves reg14 out into %rax for return
end_fun_3_f2:

                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call

fun_4_inc:

                                        # CALLEE PROLOGUE
                pushq %rbp              # save caller's base pointer
                movq %rsp, %rbp         # make stack pointer new base pointer

                addq $0, %rsp           # allocate space for local variables

                movq %rbp, %rdx         # preparing for static link computation
                movq 24(%rdx), %r8      # Move param param_9_i (i) into reg15
                movq $1, %r9            # Moves integer into reg16
                movq %r9, %rcx          # Moves reg16 out into %rcx for
                                        # operation
                movq %r8, %rax          # Moves reg15 out into %rax for
                                        # operation
                addq %rcx, %rax         # Operation: reg15 + reg17
                movq %rax, %r10         # Moves result into reg17
                movq %r10, %rax         # Moves reg17 out into %rax for return
end_fun_4_inc:

                                        # CALLEE EPILOGUE
                movq %rbp, %rsp         # restore stack pointer
                popq %rbp               # restore base pointer
                ret                     # return from call


mmap_error:
                leaq mmapEr(%rip), %rdi # pass 1. arg in %rdi
                xor %rax, %rax          # no floating point arguments
                callq printf            # calls printf method

                movq $60, %rax          # prepare for exit syscall
                xor %rdi, %rdi          # exit status 0
                syscall                 # exit


