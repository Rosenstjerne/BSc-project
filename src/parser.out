Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> body
Rule 2     empty -> <empty>
Rule 3     body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
Rule 4     optional_class_declaration_list -> empty
Rule 5     optional_class_declaration_list -> class_declaration_list
Rule 6     class_declaration_list -> class_declaration
Rule 7     class_declaration_list -> class_declaration class_declaration_list
Rule 8     class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL
Rule 9     optional_variables_declaration_list -> empty
Rule 10    optional_variables_declaration_list -> variables_declaration_list
Rule 11    variables_declaration_list -> VAR variable_type variables_list
Rule 12    variables_declaration_list -> VAR variable_type variables_list variables_declaration_list
Rule 13    variable_type -> _BOOL
Rule 14    variable_type -> _INT
Rule 15    variable_type -> NULL
Rule 16    variable_type -> IDENT
Rule 17    variable_type -> variable_type LBRAC RBRAC
Rule 18    variables_list -> IDENT
Rule 19    variables_list -> IDENT COMMA variables_list
Rule 20    optional_functions_declaration_list -> empty
Rule 21    optional_functions_declaration_list -> functions_declaration_list
Rule 22    functions_declaration_list -> function
Rule 23    functions_declaration_list -> function functions_declaration_list
Rule 24    function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
Rule 25    optional_parameter_list -> empty
Rule 26    optional_parameter_list -> parameter_list
Rule 27    parameter_list -> variable_type IDENT
Rule 28    parameter_list -> variable_type IDENT COMMA parameter_list
Rule 29    statement -> statement_return
Rule 30    statement -> statement_print
Rule 31    statement -> statement_assignment
Rule 32    statement -> statement_ifthen
Rule 33    statement -> statement_ifthenelse
Rule 34    statement -> statement_while
Rule 35    statement -> statement_compound
Rule 36    statement -> statement_break
Rule 37    statement_return -> RETURN expression SEMICOLON
Rule 38    statement_print -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 39    statement_assignment -> IDENT ASSIGN expression SEMICOLON
Rule 40    statement_ifthen -> IF LPAREN expression RPAREN statement
Rule 41    statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement
Rule 42    statement_while -> WHILE LPAREN expression RPAREN statement
Rule 43    statement_break -> BREAK
Rule 44    statement_compound -> LCURL body RCURL
Rule 45    statement_list -> statement
Rule 46    statement_list -> statement statement_list
Rule 47    expression -> expression_integer
Rule 48    expression -> expression_boolean
Rule 49    expression -> expression_identifier
Rule 50    expression -> expression_call
Rule 51    expression -> expression_binop
Rule 52    expression -> expression_group
Rule 53    expression -> expression_neg
Rule 54    expression -> expression_new
Rule 55    expression -> expression_index
Rule 56    expression -> expression_dot
Rule 57    expression_integer -> INT
Rule 58    expression_boolean -> BOOL
Rule 59    expression_neg -> NOT expression
Rule 60    expression_identifier -> IDENT
Rule 61    expression_call -> IDENT LPAREN optional_expression_list RPAREN
Rule 62    expression_binop -> expression PLUS expression
Rule 63    expression_binop -> expression MINUS expression
Rule 64    expression_binop -> expression MULTIPLY expression
Rule 65    expression_binop -> expression DIVIDE expression
Rule 66    expression_binop -> expression MODULO expression
Rule 67    expression_binop -> expression EQ expression
Rule 68    expression_binop -> expression NEQ expression
Rule 69    expression_binop -> expression LT expression
Rule 70    expression_binop -> expression GT expression
Rule 71    expression_binop -> expression LTE expression
Rule 72    expression_binop -> expression GTE expression
Rule 73    expression_binop -> expression AND expression
Rule 74    expression_binop -> expression OR expression
Rule 75    expression_group -> LPAREN expression RPAREN
Rule 76    optional_expression_list -> empty
Rule 77    optional_expression_list -> expression_list
Rule 78    expression_new -> NEW variable_type
Rule 79    expression_index -> expression LBRAC expression RBRAC
Rule 80    expression_dot -> expression DOT IDENT
Rule 81    expression_list -> expression
Rule 82    expression_list -> expression COMMA expression_list

Terminals, with rules where they appear

AND                  : 73
ASSIGN               : 39
BOOL                 : 58
BREAK                : 43
CLASS                : 8
COMMA                : 19 28 82
DIVIDE               : 65
DOT                  : 80
ELSE                 : 41
EQ                   : 67
FUNCTION             : 24
GT                   : 70
GTE                  : 72
IDENT                : 8 16 18 19 24 27 28 39 60 61 80
IF                   : 40 41
INT                  : 57
LBRAC                : 17 79
LCURL                : 8 24 44
LPAREN               : 24 38 40 41 42 61 75
LT                   : 69
LTE                  : 71
MINUS                : 63
MODULO               : 66
MULTIPLY             : 64
NEQ                  : 68
NEW                  : 78
NOT                  : 59
NULL                 : 15
OR                   : 74
PLUS                 : 62
PRINT                : 38
RBRAC                : 17 79
RCURL                : 8 24 44
RETURN               : 37
RPAREN               : 24 38 40 41 42 61 75
SEMICOLON            : 37 38 39
VAR                  : 11 12
WHILE                : 42
_BOOL                : 13
_INT                 : 14
error                : 

Nonterminals, with rules where they appear

body                 : 1 24 44
class_declaration    : 6 7
class_declaration_list : 5 7
empty                : 4 9 20 25 76
expression           : 37 38 39 40 41 42 59 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 79 79 80 81 82
expression_binop     : 51
expression_boolean   : 48
expression_call      : 50
expression_dot       : 56
expression_group     : 52
expression_identifier : 49
expression_index     : 55
expression_integer   : 47
expression_list      : 77 82
expression_neg       : 53
expression_new       : 54
function             : 22 23
functions_declaration_list : 21 23
optional_class_declaration_list : 3
optional_expression_list : 61
optional_functions_declaration_list : 3
optional_parameter_list : 24
optional_variables_declaration_list : 3
parameter_list       : 26 28
program              : 0
statement            : 40 41 41 42 45 46
statement_assignment : 31
statement_break      : 36
statement_compound   : 35
statement_ifthen     : 32
statement_ifthenelse : 33
statement_list       : 3 46
statement_print      : 30
statement_return     : 29
statement_while      : 34
variable_type        : 11 12 17 24 27 28 78
variables_declaration_list : 8 10 12
variables_list       : 11 12 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . body
    (3) body -> . optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
    (4) optional_class_declaration_list -> . empty
    (5) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 7

    program                        shift and go to state 1
    body                           shift and go to state 2
    optional_class_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    class_declaration_list         shift and go to state 5
    class_declaration              shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> body .

    $end            reduce using rule 1 (program -> body .)


state 3

    (3) body -> optional_class_declaration_list . optional_variables_declaration_list optional_functions_declaration_list statement_list
    (9) optional_variables_declaration_list -> . empty
    (10) optional_variables_declaration_list -> . variables_declaration_list
    (2) empty -> .
    (11) variables_declaration_list -> . VAR variable_type variables_list
    (12) variables_declaration_list -> . VAR variable_type variables_list variables_declaration_list

    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    VAR             shift and go to state 11

    optional_variables_declaration_list shift and go to state 8
    empty                          shift and go to state 9
    variables_declaration_list     shift and go to state 10

state 4

    (4) optional_class_declaration_list -> empty .

    VAR             reduce using rule 4 (optional_class_declaration_list -> empty .)
    FUNCTION        reduce using rule 4 (optional_class_declaration_list -> empty .)
    RETURN          reduce using rule 4 (optional_class_declaration_list -> empty .)
    PRINT           reduce using rule 4 (optional_class_declaration_list -> empty .)
    IDENT           reduce using rule 4 (optional_class_declaration_list -> empty .)
    IF              reduce using rule 4 (optional_class_declaration_list -> empty .)
    WHILE           reduce using rule 4 (optional_class_declaration_list -> empty .)
    LCURL           reduce using rule 4 (optional_class_declaration_list -> empty .)
    BREAK           reduce using rule 4 (optional_class_declaration_list -> empty .)


state 5

    (5) optional_class_declaration_list -> class_declaration_list .

    VAR             reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    FUNCTION        reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    RETURN          reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    PRINT           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    IDENT           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    IF              reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    WHILE           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    LCURL           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    BREAK           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)


state 6

    (6) class_declaration_list -> class_declaration .
    (7) class_declaration_list -> class_declaration . class_declaration_list
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 6 (class_declaration_list -> class_declaration .)
    FUNCTION        reduce using rule 6 (class_declaration_list -> class_declaration .)
    RETURN          reduce using rule 6 (class_declaration_list -> class_declaration .)
    PRINT           reduce using rule 6 (class_declaration_list -> class_declaration .)
    IDENT           reduce using rule 6 (class_declaration_list -> class_declaration .)
    IF              reduce using rule 6 (class_declaration_list -> class_declaration .)
    WHILE           reduce using rule 6 (class_declaration_list -> class_declaration .)
    LCURL           reduce using rule 6 (class_declaration_list -> class_declaration .)
    BREAK           reduce using rule 6 (class_declaration_list -> class_declaration .)
    CLASS           shift and go to state 7

    class_declaration              shift and go to state 6
    class_declaration_list         shift and go to state 12

state 7

    (8) class_declaration -> CLASS . IDENT LCURL variables_declaration_list RCURL

    IDENT           shift and go to state 13


state 8

    (3) body -> optional_class_declaration_list optional_variables_declaration_list . optional_functions_declaration_list statement_list
    (20) optional_functions_declaration_list -> . empty
    (21) optional_functions_declaration_list -> . functions_declaration_list
    (2) empty -> .
    (22) functions_declaration_list -> . function
    (23) functions_declaration_list -> . function functions_declaration_list
    (24) function -> . FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    FUNCTION        shift and go to state 18

    optional_functions_declaration_list shift and go to state 14
    empty                          shift and go to state 15
    functions_declaration_list     shift and go to state 16
    function                       shift and go to state 17

state 9

    (9) optional_variables_declaration_list -> empty .

    FUNCTION        reduce using rule 9 (optional_variables_declaration_list -> empty .)
    RETURN          reduce using rule 9 (optional_variables_declaration_list -> empty .)
    PRINT           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    IDENT           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    IF              reduce using rule 9 (optional_variables_declaration_list -> empty .)
    WHILE           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    LCURL           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    BREAK           reduce using rule 9 (optional_variables_declaration_list -> empty .)


state 10

    (10) optional_variables_declaration_list -> variables_declaration_list .

    FUNCTION        reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    RETURN          reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    PRINT           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    IDENT           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    IF              reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    WHILE           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    LCURL           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    BREAK           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)


state 11

    (11) variables_declaration_list -> VAR . variable_type variables_list
    (12) variables_declaration_list -> VAR . variable_type variables_list variables_declaration_list
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 19

state 12

    (7) class_declaration_list -> class_declaration class_declaration_list .

    VAR             reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    FUNCTION        reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    RETURN          reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    PRINT           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    IDENT           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    IF              reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    WHILE           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    LCURL           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    BREAK           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)


state 13

    (8) class_declaration -> CLASS IDENT . LCURL variables_declaration_list RCURL

    LCURL           shift and go to state 24


state 14

    (3) body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list . statement_list
    (45) statement_list -> . statement
    (46) statement_list -> . statement statement_list
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthen
    (33) statement -> . statement_ifthenelse
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement_return -> . RETURN expression SEMICOLON
    (38) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (39) statement_assignment -> . IDENT ASSIGN expression SEMICOLON
    (40) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (41) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement_while -> . WHILE LPAREN expression RPAREN statement
    (44) statement_compound -> . LCURL body RCURL
    (43) statement_break -> . BREAK

    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IDENT           shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    LCURL           shift and go to state 40
    BREAK           shift and go to state 41

    statement_list                 shift and go to state 25
    statement                      shift and go to state 26
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthen               shift and go to state 30
    statement_ifthenelse           shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34

state 15

    (20) optional_functions_declaration_list -> empty .

    RETURN          reduce using rule 20 (optional_functions_declaration_list -> empty .)
    PRINT           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    IDENT           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    IF              reduce using rule 20 (optional_functions_declaration_list -> empty .)
    WHILE           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    LCURL           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    BREAK           reduce using rule 20 (optional_functions_declaration_list -> empty .)


state 16

    (21) optional_functions_declaration_list -> functions_declaration_list .

    RETURN          reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    PRINT           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    IDENT           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    IF              reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    WHILE           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    LCURL           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    BREAK           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)


state 17

    (22) functions_declaration_list -> function .
    (23) functions_declaration_list -> function . functions_declaration_list
    (22) functions_declaration_list -> . function
    (23) functions_declaration_list -> . function functions_declaration_list
    (24) function -> . FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    RETURN          reduce using rule 22 (functions_declaration_list -> function .)
    PRINT           reduce using rule 22 (functions_declaration_list -> function .)
    IDENT           reduce using rule 22 (functions_declaration_list -> function .)
    IF              reduce using rule 22 (functions_declaration_list -> function .)
    WHILE           reduce using rule 22 (functions_declaration_list -> function .)
    LCURL           reduce using rule 22 (functions_declaration_list -> function .)
    BREAK           reduce using rule 22 (functions_declaration_list -> function .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17
    functions_declaration_list     shift and go to state 42

state 18

    (24) function -> FUNCTION . variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 43

state 19

    (11) variables_declaration_list -> VAR variable_type . variables_list
    (12) variables_declaration_list -> VAR variable_type . variables_list variables_declaration_list
    (17) variable_type -> variable_type . LBRAC RBRAC
    (18) variables_list -> . IDENT
    (19) variables_list -> . IDENT COMMA variables_list

    LBRAC           shift and go to state 45
    IDENT           shift and go to state 46

    variables_list                 shift and go to state 44

state 20

    (13) variable_type -> _BOOL .

    LBRAC           reduce using rule 13 (variable_type -> _BOOL .)
    IDENT           reduce using rule 13 (variable_type -> _BOOL .)
    SEMICOLON       reduce using rule 13 (variable_type -> _BOOL .)
    PLUS            reduce using rule 13 (variable_type -> _BOOL .)
    MINUS           reduce using rule 13 (variable_type -> _BOOL .)
    MULTIPLY        reduce using rule 13 (variable_type -> _BOOL .)
    DIVIDE          reduce using rule 13 (variable_type -> _BOOL .)
    MODULO          reduce using rule 13 (variable_type -> _BOOL .)
    EQ              reduce using rule 13 (variable_type -> _BOOL .)
    NEQ             reduce using rule 13 (variable_type -> _BOOL .)
    LT              reduce using rule 13 (variable_type -> _BOOL .)
    GT              reduce using rule 13 (variable_type -> _BOOL .)
    LTE             reduce using rule 13 (variable_type -> _BOOL .)
    GTE             reduce using rule 13 (variable_type -> _BOOL .)
    AND             reduce using rule 13 (variable_type -> _BOOL .)
    OR              reduce using rule 13 (variable_type -> _BOOL .)
    DOT             reduce using rule 13 (variable_type -> _BOOL .)
    RPAREN          reduce using rule 13 (variable_type -> _BOOL .)
    RBRAC           reduce using rule 13 (variable_type -> _BOOL .)
    COMMA           reduce using rule 13 (variable_type -> _BOOL .)


state 21

    (14) variable_type -> _INT .

    LBRAC           reduce using rule 14 (variable_type -> _INT .)
    IDENT           reduce using rule 14 (variable_type -> _INT .)
    SEMICOLON       reduce using rule 14 (variable_type -> _INT .)
    PLUS            reduce using rule 14 (variable_type -> _INT .)
    MINUS           reduce using rule 14 (variable_type -> _INT .)
    MULTIPLY        reduce using rule 14 (variable_type -> _INT .)
    DIVIDE          reduce using rule 14 (variable_type -> _INT .)
    MODULO          reduce using rule 14 (variable_type -> _INT .)
    EQ              reduce using rule 14 (variable_type -> _INT .)
    NEQ             reduce using rule 14 (variable_type -> _INT .)
    LT              reduce using rule 14 (variable_type -> _INT .)
    GT              reduce using rule 14 (variable_type -> _INT .)
    LTE             reduce using rule 14 (variable_type -> _INT .)
    GTE             reduce using rule 14 (variable_type -> _INT .)
    AND             reduce using rule 14 (variable_type -> _INT .)
    OR              reduce using rule 14 (variable_type -> _INT .)
    DOT             reduce using rule 14 (variable_type -> _INT .)
    RPAREN          reduce using rule 14 (variable_type -> _INT .)
    RBRAC           reduce using rule 14 (variable_type -> _INT .)
    COMMA           reduce using rule 14 (variable_type -> _INT .)


state 22

    (15) variable_type -> NULL .

    LBRAC           reduce using rule 15 (variable_type -> NULL .)
    IDENT           reduce using rule 15 (variable_type -> NULL .)
    SEMICOLON       reduce using rule 15 (variable_type -> NULL .)
    PLUS            reduce using rule 15 (variable_type -> NULL .)
    MINUS           reduce using rule 15 (variable_type -> NULL .)
    MULTIPLY        reduce using rule 15 (variable_type -> NULL .)
    DIVIDE          reduce using rule 15 (variable_type -> NULL .)
    MODULO          reduce using rule 15 (variable_type -> NULL .)
    EQ              reduce using rule 15 (variable_type -> NULL .)
    NEQ             reduce using rule 15 (variable_type -> NULL .)
    LT              reduce using rule 15 (variable_type -> NULL .)
    GT              reduce using rule 15 (variable_type -> NULL .)
    LTE             reduce using rule 15 (variable_type -> NULL .)
    GTE             reduce using rule 15 (variable_type -> NULL .)
    AND             reduce using rule 15 (variable_type -> NULL .)
    OR              reduce using rule 15 (variable_type -> NULL .)
    DOT             reduce using rule 15 (variable_type -> NULL .)
    RPAREN          reduce using rule 15 (variable_type -> NULL .)
    RBRAC           reduce using rule 15 (variable_type -> NULL .)
    COMMA           reduce using rule 15 (variable_type -> NULL .)


state 23

    (16) variable_type -> IDENT .

    LBRAC           reduce using rule 16 (variable_type -> IDENT .)
    IDENT           reduce using rule 16 (variable_type -> IDENT .)
    SEMICOLON       reduce using rule 16 (variable_type -> IDENT .)
    PLUS            reduce using rule 16 (variable_type -> IDENT .)
    MINUS           reduce using rule 16 (variable_type -> IDENT .)
    MULTIPLY        reduce using rule 16 (variable_type -> IDENT .)
    DIVIDE          reduce using rule 16 (variable_type -> IDENT .)
    MODULO          reduce using rule 16 (variable_type -> IDENT .)
    EQ              reduce using rule 16 (variable_type -> IDENT .)
    NEQ             reduce using rule 16 (variable_type -> IDENT .)
    LT              reduce using rule 16 (variable_type -> IDENT .)
    GT              reduce using rule 16 (variable_type -> IDENT .)
    LTE             reduce using rule 16 (variable_type -> IDENT .)
    GTE             reduce using rule 16 (variable_type -> IDENT .)
    AND             reduce using rule 16 (variable_type -> IDENT .)
    OR              reduce using rule 16 (variable_type -> IDENT .)
    DOT             reduce using rule 16 (variable_type -> IDENT .)
    RPAREN          reduce using rule 16 (variable_type -> IDENT .)
    RBRAC           reduce using rule 16 (variable_type -> IDENT .)
    COMMA           reduce using rule 16 (variable_type -> IDENT .)


state 24

    (8) class_declaration -> CLASS IDENT LCURL . variables_declaration_list RCURL
    (11) variables_declaration_list -> . VAR variable_type variables_list
    (12) variables_declaration_list -> . VAR variable_type variables_list variables_declaration_list

    VAR             shift and go to state 11

    variables_declaration_list     shift and go to state 47

state 25

    (3) body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list .

    $end            reduce using rule 3 (body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list .)
    RCURL           reduce using rule 3 (body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list .)


state 26

    (45) statement_list -> statement .
    (46) statement_list -> statement . statement_list
    (45) statement_list -> . statement
    (46) statement_list -> . statement statement_list
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthen
    (33) statement -> . statement_ifthenelse
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement_return -> . RETURN expression SEMICOLON
    (38) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (39) statement_assignment -> . IDENT ASSIGN expression SEMICOLON
    (40) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (41) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement_while -> . WHILE LPAREN expression RPAREN statement
    (44) statement_compound -> . LCURL body RCURL
    (43) statement_break -> . BREAK

    $end            reduce using rule 45 (statement_list -> statement .)
    RCURL           reduce using rule 45 (statement_list -> statement .)
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IDENT           shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    LCURL           shift and go to state 40
    BREAK           shift and go to state 41

    statement                      shift and go to state 26
    statement_list                 shift and go to state 48
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthen               shift and go to state 30
    statement_ifthenelse           shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34

state 27

    (29) statement -> statement_return .

    RETURN          reduce using rule 29 (statement -> statement_return .)
    PRINT           reduce using rule 29 (statement -> statement_return .)
    IDENT           reduce using rule 29 (statement -> statement_return .)
    IF              reduce using rule 29 (statement -> statement_return .)
    WHILE           reduce using rule 29 (statement -> statement_return .)
    LCURL           reduce using rule 29 (statement -> statement_return .)
    BREAK           reduce using rule 29 (statement -> statement_return .)
    $end            reduce using rule 29 (statement -> statement_return .)
    RCURL           reduce using rule 29 (statement -> statement_return .)
    ELSE            reduce using rule 29 (statement -> statement_return .)


state 28

    (30) statement -> statement_print .

    RETURN          reduce using rule 30 (statement -> statement_print .)
    PRINT           reduce using rule 30 (statement -> statement_print .)
    IDENT           reduce using rule 30 (statement -> statement_print .)
    IF              reduce using rule 30 (statement -> statement_print .)
    WHILE           reduce using rule 30 (statement -> statement_print .)
    LCURL           reduce using rule 30 (statement -> statement_print .)
    BREAK           reduce using rule 30 (statement -> statement_print .)
    $end            reduce using rule 30 (statement -> statement_print .)
    RCURL           reduce using rule 30 (statement -> statement_print .)
    ELSE            reduce using rule 30 (statement -> statement_print .)


state 29

    (31) statement -> statement_assignment .

    RETURN          reduce using rule 31 (statement -> statement_assignment .)
    PRINT           reduce using rule 31 (statement -> statement_assignment .)
    IDENT           reduce using rule 31 (statement -> statement_assignment .)
    IF              reduce using rule 31 (statement -> statement_assignment .)
    WHILE           reduce using rule 31 (statement -> statement_assignment .)
    LCURL           reduce using rule 31 (statement -> statement_assignment .)
    BREAK           reduce using rule 31 (statement -> statement_assignment .)
    $end            reduce using rule 31 (statement -> statement_assignment .)
    RCURL           reduce using rule 31 (statement -> statement_assignment .)
    ELSE            reduce using rule 31 (statement -> statement_assignment .)


state 30

    (32) statement -> statement_ifthen .

    RETURN          reduce using rule 32 (statement -> statement_ifthen .)
    PRINT           reduce using rule 32 (statement -> statement_ifthen .)
    IDENT           reduce using rule 32 (statement -> statement_ifthen .)
    IF              reduce using rule 32 (statement -> statement_ifthen .)
    WHILE           reduce using rule 32 (statement -> statement_ifthen .)
    LCURL           reduce using rule 32 (statement -> statement_ifthen .)
    BREAK           reduce using rule 32 (statement -> statement_ifthen .)
    $end            reduce using rule 32 (statement -> statement_ifthen .)
    RCURL           reduce using rule 32 (statement -> statement_ifthen .)
    ELSE            reduce using rule 32 (statement -> statement_ifthen .)


state 31

    (33) statement -> statement_ifthenelse .

    RETURN          reduce using rule 33 (statement -> statement_ifthenelse .)
    PRINT           reduce using rule 33 (statement -> statement_ifthenelse .)
    IDENT           reduce using rule 33 (statement -> statement_ifthenelse .)
    IF              reduce using rule 33 (statement -> statement_ifthenelse .)
    WHILE           reduce using rule 33 (statement -> statement_ifthenelse .)
    LCURL           reduce using rule 33 (statement -> statement_ifthenelse .)
    BREAK           reduce using rule 33 (statement -> statement_ifthenelse .)
    $end            reduce using rule 33 (statement -> statement_ifthenelse .)
    RCURL           reduce using rule 33 (statement -> statement_ifthenelse .)
    ELSE            reduce using rule 33 (statement -> statement_ifthenelse .)


state 32

    (34) statement -> statement_while .

    RETURN          reduce using rule 34 (statement -> statement_while .)
    PRINT           reduce using rule 34 (statement -> statement_while .)
    IDENT           reduce using rule 34 (statement -> statement_while .)
    IF              reduce using rule 34 (statement -> statement_while .)
    WHILE           reduce using rule 34 (statement -> statement_while .)
    LCURL           reduce using rule 34 (statement -> statement_while .)
    BREAK           reduce using rule 34 (statement -> statement_while .)
    $end            reduce using rule 34 (statement -> statement_while .)
    RCURL           reduce using rule 34 (statement -> statement_while .)
    ELSE            reduce using rule 34 (statement -> statement_while .)


state 33

    (35) statement -> statement_compound .

    RETURN          reduce using rule 35 (statement -> statement_compound .)
    PRINT           reduce using rule 35 (statement -> statement_compound .)
    IDENT           reduce using rule 35 (statement -> statement_compound .)
    IF              reduce using rule 35 (statement -> statement_compound .)
    WHILE           reduce using rule 35 (statement -> statement_compound .)
    LCURL           reduce using rule 35 (statement -> statement_compound .)
    BREAK           reduce using rule 35 (statement -> statement_compound .)
    $end            reduce using rule 35 (statement -> statement_compound .)
    RCURL           reduce using rule 35 (statement -> statement_compound .)
    ELSE            reduce using rule 35 (statement -> statement_compound .)


state 34

    (36) statement -> statement_break .

    RETURN          reduce using rule 36 (statement -> statement_break .)
    PRINT           reduce using rule 36 (statement -> statement_break .)
    IDENT           reduce using rule 36 (statement -> statement_break .)
    IF              reduce using rule 36 (statement -> statement_break .)
    WHILE           reduce using rule 36 (statement -> statement_break .)
    LCURL           reduce using rule 36 (statement -> statement_break .)
    BREAK           reduce using rule 36 (statement -> statement_break .)
    $end            reduce using rule 36 (statement -> statement_break .)
    RCURL           reduce using rule 36 (statement -> statement_break .)
    ELSE            reduce using rule 36 (statement -> statement_break .)


state 35

    (37) statement_return -> RETURN . expression SEMICOLON
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 49
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 36

    (38) statement_print -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 66


state 37

    (39) statement_assignment -> IDENT . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 67


state 38

    (40) statement_ifthen -> IF . LPAREN expression RPAREN statement
    (41) statement_ifthenelse -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 68


state 39

    (42) statement_while -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 69


state 40

    (44) statement_compound -> LCURL . body RCURL
    (3) body -> . optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
    (4) optional_class_declaration_list -> . empty
    (5) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 7

    body                           shift and go to state 70
    optional_class_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    class_declaration_list         shift and go to state 5
    class_declaration              shift and go to state 6

state 41

    (43) statement_break -> BREAK .

    RETURN          reduce using rule 43 (statement_break -> BREAK .)
    PRINT           reduce using rule 43 (statement_break -> BREAK .)
    IDENT           reduce using rule 43 (statement_break -> BREAK .)
    IF              reduce using rule 43 (statement_break -> BREAK .)
    WHILE           reduce using rule 43 (statement_break -> BREAK .)
    LCURL           reduce using rule 43 (statement_break -> BREAK .)
    BREAK           reduce using rule 43 (statement_break -> BREAK .)
    $end            reduce using rule 43 (statement_break -> BREAK .)
    RCURL           reduce using rule 43 (statement_break -> BREAK .)
    ELSE            reduce using rule 43 (statement_break -> BREAK .)


state 42

    (23) functions_declaration_list -> function functions_declaration_list .

    RETURN          reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    PRINT           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    IDENT           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    IF              reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    WHILE           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    LCURL           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    BREAK           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)


state 43

    (24) function -> FUNCTION variable_type . IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
    (17) variable_type -> variable_type . LBRAC RBRAC

    IDENT           shift and go to state 71
    LBRAC           shift and go to state 45


state 44

    (11) variables_declaration_list -> VAR variable_type variables_list .
    (12) variables_declaration_list -> VAR variable_type variables_list . variables_declaration_list
    (11) variables_declaration_list -> . VAR variable_type variables_list
    (12) variables_declaration_list -> . VAR variable_type variables_list variables_declaration_list

    FUNCTION        reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    RETURN          reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    PRINT           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    IDENT           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    IF              reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    WHILE           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    LCURL           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    BREAK           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    RCURL           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list .)
    VAR             shift and go to state 11

    variables_declaration_list     shift and go to state 72

state 45

    (17) variable_type -> variable_type LBRAC . RBRAC

    RBRAC           shift and go to state 73


state 46

    (18) variables_list -> IDENT .
    (19) variables_list -> IDENT . COMMA variables_list

    VAR             reduce using rule 18 (variables_list -> IDENT .)
    FUNCTION        reduce using rule 18 (variables_list -> IDENT .)
    RETURN          reduce using rule 18 (variables_list -> IDENT .)
    PRINT           reduce using rule 18 (variables_list -> IDENT .)
    IDENT           reduce using rule 18 (variables_list -> IDENT .)
    IF              reduce using rule 18 (variables_list -> IDENT .)
    WHILE           reduce using rule 18 (variables_list -> IDENT .)
    LCURL           reduce using rule 18 (variables_list -> IDENT .)
    BREAK           reduce using rule 18 (variables_list -> IDENT .)
    RCURL           reduce using rule 18 (variables_list -> IDENT .)
    COMMA           shift and go to state 74


state 47

    (8) class_declaration -> CLASS IDENT LCURL variables_declaration_list . RCURL

    RCURL           shift and go to state 75


state 48

    (46) statement_list -> statement statement_list .

    $end            reduce using rule 46 (statement_list -> statement statement_list .)
    RCURL           reduce using rule 46 (statement_list -> statement statement_list .)


state 49

    (37) statement_return -> RETURN expression . SEMICOLON
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       shift and go to state 76
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 50

    (47) expression -> expression_integer .

    SEMICOLON       reduce using rule 47 (expression -> expression_integer .)
    PLUS            reduce using rule 47 (expression -> expression_integer .)
    MINUS           reduce using rule 47 (expression -> expression_integer .)
    MULTIPLY        reduce using rule 47 (expression -> expression_integer .)
    DIVIDE          reduce using rule 47 (expression -> expression_integer .)
    MODULO          reduce using rule 47 (expression -> expression_integer .)
    EQ              reduce using rule 47 (expression -> expression_integer .)
    NEQ             reduce using rule 47 (expression -> expression_integer .)
    LT              reduce using rule 47 (expression -> expression_integer .)
    GT              reduce using rule 47 (expression -> expression_integer .)
    LTE             reduce using rule 47 (expression -> expression_integer .)
    GTE             reduce using rule 47 (expression -> expression_integer .)
    AND             reduce using rule 47 (expression -> expression_integer .)
    OR              reduce using rule 47 (expression -> expression_integer .)
    LBRAC           reduce using rule 47 (expression -> expression_integer .)
    DOT             reduce using rule 47 (expression -> expression_integer .)
    RPAREN          reduce using rule 47 (expression -> expression_integer .)
    RBRAC           reduce using rule 47 (expression -> expression_integer .)
    COMMA           reduce using rule 47 (expression -> expression_integer .)


state 51

    (48) expression -> expression_boolean .

    SEMICOLON       reduce using rule 48 (expression -> expression_boolean .)
    PLUS            reduce using rule 48 (expression -> expression_boolean .)
    MINUS           reduce using rule 48 (expression -> expression_boolean .)
    MULTIPLY        reduce using rule 48 (expression -> expression_boolean .)
    DIVIDE          reduce using rule 48 (expression -> expression_boolean .)
    MODULO          reduce using rule 48 (expression -> expression_boolean .)
    EQ              reduce using rule 48 (expression -> expression_boolean .)
    NEQ             reduce using rule 48 (expression -> expression_boolean .)
    LT              reduce using rule 48 (expression -> expression_boolean .)
    GT              reduce using rule 48 (expression -> expression_boolean .)
    LTE             reduce using rule 48 (expression -> expression_boolean .)
    GTE             reduce using rule 48 (expression -> expression_boolean .)
    AND             reduce using rule 48 (expression -> expression_boolean .)
    OR              reduce using rule 48 (expression -> expression_boolean .)
    LBRAC           reduce using rule 48 (expression -> expression_boolean .)
    DOT             reduce using rule 48 (expression -> expression_boolean .)
    RPAREN          reduce using rule 48 (expression -> expression_boolean .)
    RBRAC           reduce using rule 48 (expression -> expression_boolean .)
    COMMA           reduce using rule 48 (expression -> expression_boolean .)


state 52

    (49) expression -> expression_identifier .

    SEMICOLON       reduce using rule 49 (expression -> expression_identifier .)
    PLUS            reduce using rule 49 (expression -> expression_identifier .)
    MINUS           reduce using rule 49 (expression -> expression_identifier .)
    MULTIPLY        reduce using rule 49 (expression -> expression_identifier .)
    DIVIDE          reduce using rule 49 (expression -> expression_identifier .)
    MODULO          reduce using rule 49 (expression -> expression_identifier .)
    EQ              reduce using rule 49 (expression -> expression_identifier .)
    NEQ             reduce using rule 49 (expression -> expression_identifier .)
    LT              reduce using rule 49 (expression -> expression_identifier .)
    GT              reduce using rule 49 (expression -> expression_identifier .)
    LTE             reduce using rule 49 (expression -> expression_identifier .)
    GTE             reduce using rule 49 (expression -> expression_identifier .)
    AND             reduce using rule 49 (expression -> expression_identifier .)
    OR              reduce using rule 49 (expression -> expression_identifier .)
    LBRAC           reduce using rule 49 (expression -> expression_identifier .)
    DOT             reduce using rule 49 (expression -> expression_identifier .)
    RPAREN          reduce using rule 49 (expression -> expression_identifier .)
    RBRAC           reduce using rule 49 (expression -> expression_identifier .)
    COMMA           reduce using rule 49 (expression -> expression_identifier .)


state 53

    (50) expression -> expression_call .

    SEMICOLON       reduce using rule 50 (expression -> expression_call .)
    PLUS            reduce using rule 50 (expression -> expression_call .)
    MINUS           reduce using rule 50 (expression -> expression_call .)
    MULTIPLY        reduce using rule 50 (expression -> expression_call .)
    DIVIDE          reduce using rule 50 (expression -> expression_call .)
    MODULO          reduce using rule 50 (expression -> expression_call .)
    EQ              reduce using rule 50 (expression -> expression_call .)
    NEQ             reduce using rule 50 (expression -> expression_call .)
    LT              reduce using rule 50 (expression -> expression_call .)
    GT              reduce using rule 50 (expression -> expression_call .)
    LTE             reduce using rule 50 (expression -> expression_call .)
    GTE             reduce using rule 50 (expression -> expression_call .)
    AND             reduce using rule 50 (expression -> expression_call .)
    OR              reduce using rule 50 (expression -> expression_call .)
    LBRAC           reduce using rule 50 (expression -> expression_call .)
    DOT             reduce using rule 50 (expression -> expression_call .)
    RPAREN          reduce using rule 50 (expression -> expression_call .)
    RBRAC           reduce using rule 50 (expression -> expression_call .)
    COMMA           reduce using rule 50 (expression -> expression_call .)


state 54

    (51) expression -> expression_binop .

    SEMICOLON       reduce using rule 51 (expression -> expression_binop .)
    PLUS            reduce using rule 51 (expression -> expression_binop .)
    MINUS           reduce using rule 51 (expression -> expression_binop .)
    MULTIPLY        reduce using rule 51 (expression -> expression_binop .)
    DIVIDE          reduce using rule 51 (expression -> expression_binop .)
    MODULO          reduce using rule 51 (expression -> expression_binop .)
    EQ              reduce using rule 51 (expression -> expression_binop .)
    NEQ             reduce using rule 51 (expression -> expression_binop .)
    LT              reduce using rule 51 (expression -> expression_binop .)
    GT              reduce using rule 51 (expression -> expression_binop .)
    LTE             reduce using rule 51 (expression -> expression_binop .)
    GTE             reduce using rule 51 (expression -> expression_binop .)
    AND             reduce using rule 51 (expression -> expression_binop .)
    OR              reduce using rule 51 (expression -> expression_binop .)
    LBRAC           reduce using rule 51 (expression -> expression_binop .)
    DOT             reduce using rule 51 (expression -> expression_binop .)
    RPAREN          reduce using rule 51 (expression -> expression_binop .)
    RBRAC           reduce using rule 51 (expression -> expression_binop .)
    COMMA           reduce using rule 51 (expression -> expression_binop .)


state 55

    (52) expression -> expression_group .

    SEMICOLON       reduce using rule 52 (expression -> expression_group .)
    PLUS            reduce using rule 52 (expression -> expression_group .)
    MINUS           reduce using rule 52 (expression -> expression_group .)
    MULTIPLY        reduce using rule 52 (expression -> expression_group .)
    DIVIDE          reduce using rule 52 (expression -> expression_group .)
    MODULO          reduce using rule 52 (expression -> expression_group .)
    EQ              reduce using rule 52 (expression -> expression_group .)
    NEQ             reduce using rule 52 (expression -> expression_group .)
    LT              reduce using rule 52 (expression -> expression_group .)
    GT              reduce using rule 52 (expression -> expression_group .)
    LTE             reduce using rule 52 (expression -> expression_group .)
    GTE             reduce using rule 52 (expression -> expression_group .)
    AND             reduce using rule 52 (expression -> expression_group .)
    OR              reduce using rule 52 (expression -> expression_group .)
    LBRAC           reduce using rule 52 (expression -> expression_group .)
    DOT             reduce using rule 52 (expression -> expression_group .)
    RPAREN          reduce using rule 52 (expression -> expression_group .)
    RBRAC           reduce using rule 52 (expression -> expression_group .)
    COMMA           reduce using rule 52 (expression -> expression_group .)


state 56

    (53) expression -> expression_neg .

    SEMICOLON       reduce using rule 53 (expression -> expression_neg .)
    PLUS            reduce using rule 53 (expression -> expression_neg .)
    MINUS           reduce using rule 53 (expression -> expression_neg .)
    MULTIPLY        reduce using rule 53 (expression -> expression_neg .)
    DIVIDE          reduce using rule 53 (expression -> expression_neg .)
    MODULO          reduce using rule 53 (expression -> expression_neg .)
    EQ              reduce using rule 53 (expression -> expression_neg .)
    NEQ             reduce using rule 53 (expression -> expression_neg .)
    LT              reduce using rule 53 (expression -> expression_neg .)
    GT              reduce using rule 53 (expression -> expression_neg .)
    LTE             reduce using rule 53 (expression -> expression_neg .)
    GTE             reduce using rule 53 (expression -> expression_neg .)
    AND             reduce using rule 53 (expression -> expression_neg .)
    OR              reduce using rule 53 (expression -> expression_neg .)
    LBRAC           reduce using rule 53 (expression -> expression_neg .)
    DOT             reduce using rule 53 (expression -> expression_neg .)
    RPAREN          reduce using rule 53 (expression -> expression_neg .)
    RBRAC           reduce using rule 53 (expression -> expression_neg .)
    COMMA           reduce using rule 53 (expression -> expression_neg .)


state 57

    (54) expression -> expression_new .

    SEMICOLON       reduce using rule 54 (expression -> expression_new .)
    PLUS            reduce using rule 54 (expression -> expression_new .)
    MINUS           reduce using rule 54 (expression -> expression_new .)
    MULTIPLY        reduce using rule 54 (expression -> expression_new .)
    DIVIDE          reduce using rule 54 (expression -> expression_new .)
    MODULO          reduce using rule 54 (expression -> expression_new .)
    EQ              reduce using rule 54 (expression -> expression_new .)
    NEQ             reduce using rule 54 (expression -> expression_new .)
    LT              reduce using rule 54 (expression -> expression_new .)
    GT              reduce using rule 54 (expression -> expression_new .)
    LTE             reduce using rule 54 (expression -> expression_new .)
    GTE             reduce using rule 54 (expression -> expression_new .)
    AND             reduce using rule 54 (expression -> expression_new .)
    OR              reduce using rule 54 (expression -> expression_new .)
    LBRAC           reduce using rule 54 (expression -> expression_new .)
    DOT             reduce using rule 54 (expression -> expression_new .)
    RPAREN          reduce using rule 54 (expression -> expression_new .)
    RBRAC           reduce using rule 54 (expression -> expression_new .)
    COMMA           reduce using rule 54 (expression -> expression_new .)


state 58

    (55) expression -> expression_index .

    SEMICOLON       reduce using rule 55 (expression -> expression_index .)
    PLUS            reduce using rule 55 (expression -> expression_index .)
    MINUS           reduce using rule 55 (expression -> expression_index .)
    MULTIPLY        reduce using rule 55 (expression -> expression_index .)
    DIVIDE          reduce using rule 55 (expression -> expression_index .)
    MODULO          reduce using rule 55 (expression -> expression_index .)
    EQ              reduce using rule 55 (expression -> expression_index .)
    NEQ             reduce using rule 55 (expression -> expression_index .)
    LT              reduce using rule 55 (expression -> expression_index .)
    GT              reduce using rule 55 (expression -> expression_index .)
    LTE             reduce using rule 55 (expression -> expression_index .)
    GTE             reduce using rule 55 (expression -> expression_index .)
    AND             reduce using rule 55 (expression -> expression_index .)
    OR              reduce using rule 55 (expression -> expression_index .)
    LBRAC           reduce using rule 55 (expression -> expression_index .)
    DOT             reduce using rule 55 (expression -> expression_index .)
    RPAREN          reduce using rule 55 (expression -> expression_index .)
    RBRAC           reduce using rule 55 (expression -> expression_index .)
    COMMA           reduce using rule 55 (expression -> expression_index .)


state 59

    (56) expression -> expression_dot .

    SEMICOLON       reduce using rule 56 (expression -> expression_dot .)
    PLUS            reduce using rule 56 (expression -> expression_dot .)
    MINUS           reduce using rule 56 (expression -> expression_dot .)
    MULTIPLY        reduce using rule 56 (expression -> expression_dot .)
    DIVIDE          reduce using rule 56 (expression -> expression_dot .)
    MODULO          reduce using rule 56 (expression -> expression_dot .)
    EQ              reduce using rule 56 (expression -> expression_dot .)
    NEQ             reduce using rule 56 (expression -> expression_dot .)
    LT              reduce using rule 56 (expression -> expression_dot .)
    GT              reduce using rule 56 (expression -> expression_dot .)
    LTE             reduce using rule 56 (expression -> expression_dot .)
    GTE             reduce using rule 56 (expression -> expression_dot .)
    AND             reduce using rule 56 (expression -> expression_dot .)
    OR              reduce using rule 56 (expression -> expression_dot .)
    LBRAC           reduce using rule 56 (expression -> expression_dot .)
    DOT             reduce using rule 56 (expression -> expression_dot .)
    RPAREN          reduce using rule 56 (expression -> expression_dot .)
    RBRAC           reduce using rule 56 (expression -> expression_dot .)
    COMMA           reduce using rule 56 (expression -> expression_dot .)


state 60

    (57) expression_integer -> INT .

    SEMICOLON       reduce using rule 57 (expression_integer -> INT .)
    PLUS            reduce using rule 57 (expression_integer -> INT .)
    MINUS           reduce using rule 57 (expression_integer -> INT .)
    MULTIPLY        reduce using rule 57 (expression_integer -> INT .)
    DIVIDE          reduce using rule 57 (expression_integer -> INT .)
    MODULO          reduce using rule 57 (expression_integer -> INT .)
    EQ              reduce using rule 57 (expression_integer -> INT .)
    NEQ             reduce using rule 57 (expression_integer -> INT .)
    LT              reduce using rule 57 (expression_integer -> INT .)
    GT              reduce using rule 57 (expression_integer -> INT .)
    LTE             reduce using rule 57 (expression_integer -> INT .)
    GTE             reduce using rule 57 (expression_integer -> INT .)
    AND             reduce using rule 57 (expression_integer -> INT .)
    OR              reduce using rule 57 (expression_integer -> INT .)
    LBRAC           reduce using rule 57 (expression_integer -> INT .)
    DOT             reduce using rule 57 (expression_integer -> INT .)
    RPAREN          reduce using rule 57 (expression_integer -> INT .)
    RBRAC           reduce using rule 57 (expression_integer -> INT .)
    COMMA           reduce using rule 57 (expression_integer -> INT .)


state 61

    (58) expression_boolean -> BOOL .

    SEMICOLON       reduce using rule 58 (expression_boolean -> BOOL .)
    PLUS            reduce using rule 58 (expression_boolean -> BOOL .)
    MINUS           reduce using rule 58 (expression_boolean -> BOOL .)
    MULTIPLY        reduce using rule 58 (expression_boolean -> BOOL .)
    DIVIDE          reduce using rule 58 (expression_boolean -> BOOL .)
    MODULO          reduce using rule 58 (expression_boolean -> BOOL .)
    EQ              reduce using rule 58 (expression_boolean -> BOOL .)
    NEQ             reduce using rule 58 (expression_boolean -> BOOL .)
    LT              reduce using rule 58 (expression_boolean -> BOOL .)
    GT              reduce using rule 58 (expression_boolean -> BOOL .)
    LTE             reduce using rule 58 (expression_boolean -> BOOL .)
    GTE             reduce using rule 58 (expression_boolean -> BOOL .)
    AND             reduce using rule 58 (expression_boolean -> BOOL .)
    OR              reduce using rule 58 (expression_boolean -> BOOL .)
    LBRAC           reduce using rule 58 (expression_boolean -> BOOL .)
    DOT             reduce using rule 58 (expression_boolean -> BOOL .)
    RPAREN          reduce using rule 58 (expression_boolean -> BOOL .)
    RBRAC           reduce using rule 58 (expression_boolean -> BOOL .)
    COMMA           reduce using rule 58 (expression_boolean -> BOOL .)


state 62

    (60) expression_identifier -> IDENT .
    (61) expression_call -> IDENT . LPAREN optional_expression_list RPAREN

    SEMICOLON       reduce using rule 60 (expression_identifier -> IDENT .)
    PLUS            reduce using rule 60 (expression_identifier -> IDENT .)
    MINUS           reduce using rule 60 (expression_identifier -> IDENT .)
    MULTIPLY        reduce using rule 60 (expression_identifier -> IDENT .)
    DIVIDE          reduce using rule 60 (expression_identifier -> IDENT .)
    MODULO          reduce using rule 60 (expression_identifier -> IDENT .)
    EQ              reduce using rule 60 (expression_identifier -> IDENT .)
    NEQ             reduce using rule 60 (expression_identifier -> IDENT .)
    LT              reduce using rule 60 (expression_identifier -> IDENT .)
    GT              reduce using rule 60 (expression_identifier -> IDENT .)
    LTE             reduce using rule 60 (expression_identifier -> IDENT .)
    GTE             reduce using rule 60 (expression_identifier -> IDENT .)
    AND             reduce using rule 60 (expression_identifier -> IDENT .)
    OR              reduce using rule 60 (expression_identifier -> IDENT .)
    LBRAC           reduce using rule 60 (expression_identifier -> IDENT .)
    DOT             reduce using rule 60 (expression_identifier -> IDENT .)
    RPAREN          reduce using rule 60 (expression_identifier -> IDENT .)
    RBRAC           reduce using rule 60 (expression_identifier -> IDENT .)
    COMMA           reduce using rule 60 (expression_identifier -> IDENT .)
    LPAREN          shift and go to state 92


state 63

    (75) expression_group -> LPAREN . expression RPAREN
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 93
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 64

    (59) expression_neg -> NOT . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 94
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 65

    (78) expression_new -> NEW . variable_type
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 95

state 66

    (38) statement_print -> PRINT LPAREN . expression RPAREN SEMICOLON
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 96
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 67

    (39) statement_assignment -> IDENT ASSIGN . expression SEMICOLON
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 97
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 68

    (40) statement_ifthen -> IF LPAREN . expression RPAREN statement
    (41) statement_ifthenelse -> IF LPAREN . expression RPAREN statement ELSE statement
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 98
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 69

    (42) statement_while -> WHILE LPAREN . expression RPAREN statement
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 99
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 70

    (44) statement_compound -> LCURL body . RCURL

    RCURL           shift and go to state 100


state 71

    (24) function -> FUNCTION variable_type IDENT . LPAREN optional_parameter_list RPAREN LCURL body RCURL

    LPAREN          shift and go to state 101


state 72

    (12) variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .

    FUNCTION        reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    RETURN          reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    PRINT           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    IDENT           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    IF              reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    WHILE           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    LCURL           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    BREAK           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)
    RCURL           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list variables_declaration_list .)


state 73

    (17) variable_type -> variable_type LBRAC RBRAC .

    LBRAC           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    IDENT           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    SEMICOLON       reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    PLUS            reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    MINUS           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    MULTIPLY        reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    DIVIDE          reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    MODULO          reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    EQ              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    NEQ             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    LT              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    GT              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    LTE             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    GTE             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    AND             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    OR              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    DOT             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    RPAREN          reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    RBRAC           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    COMMA           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)


state 74

    (19) variables_list -> IDENT COMMA . variables_list
    (18) variables_list -> . IDENT
    (19) variables_list -> . IDENT COMMA variables_list

    IDENT           shift and go to state 46

    variables_list                 shift and go to state 102

state 75

    (8) class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .

    CLASS           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    VAR             reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    FUNCTION        reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    RETURN          reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    PRINT           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    IDENT           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    IF              reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    WHILE           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    LCURL           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    BREAK           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)


state 76

    (37) statement_return -> RETURN expression SEMICOLON .

    RETURN          reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    IDENT           reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    LCURL           reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    $end            reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    RCURL           reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 37 (statement_return -> RETURN expression SEMICOLON .)


state 77

    (62) expression_binop -> expression PLUS . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 103
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 78

    (63) expression_binop -> expression MINUS . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 104
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 79

    (64) expression_binop -> expression MULTIPLY . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 105
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 80

    (65) expression_binop -> expression DIVIDE . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 106
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 81

    (66) expression_binop -> expression MODULO . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 107
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 82

    (67) expression_binop -> expression EQ . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 108
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 83

    (68) expression_binop -> expression NEQ . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 109
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 84

    (69) expression_binop -> expression LT . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 110
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 85

    (70) expression_binop -> expression GT . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 111
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 86

    (71) expression_binop -> expression LTE . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 112
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 87

    (72) expression_binop -> expression GTE . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 113
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 88

    (73) expression_binop -> expression AND . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 114
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 89

    (74) expression_binop -> expression OR . expression
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 115
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 90

    (79) expression_index -> expression LBRAC . expression RBRAC
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 116
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 91

    (80) expression_dot -> expression DOT . IDENT

    IDENT           shift and go to state 117


state 92

    (61) expression_call -> IDENT LPAREN . optional_expression_list RPAREN
    (76) optional_expression_list -> . empty
    (77) optional_expression_list -> . expression_list
    (2) empty -> .
    (81) expression_list -> . expression
    (82) expression_list -> . expression COMMA expression_list
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    RPAREN          reduce using rule 2 (empty -> .)
    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    optional_expression_list       shift and go to state 118
    empty                          shift and go to state 119
    expression_list                shift and go to state 120
    expression                     shift and go to state 121
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 93

    (75) expression_group -> LPAREN expression . RPAREN
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    RPAREN          shift and go to state 122
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 94

    (59) expression_neg -> NOT expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LBRAC resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 59 (expression_neg -> NOT expression .)
    RPAREN          reduce using rule 59 (expression_neg -> NOT expression .)
    RBRAC           reduce using rule 59 (expression_neg -> NOT expression .)
    COMMA           reduce using rule 59 (expression_neg -> NOT expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91

  ! PLUS            [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! MINUS           [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! MODULO          [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! EQ              [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! NEQ             [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! LT              [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! GT              [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! LTE             [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! GTE             [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! AND             [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! OR              [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! LBRAC           [ reduce using rule 59 (expression_neg -> NOT expression .) ]
  ! DOT             [ reduce using rule 59 (expression_neg -> NOT expression .) ]


state 95

    (78) expression_new -> NEW variable_type .
    (17) variable_type -> variable_type . LBRAC RBRAC

  ! shift/reduce conflict for LBRAC resolved as shift
    SEMICOLON       reduce using rule 78 (expression_new -> NEW variable_type .)
    PLUS            reduce using rule 78 (expression_new -> NEW variable_type .)
    MINUS           reduce using rule 78 (expression_new -> NEW variable_type .)
    MULTIPLY        reduce using rule 78 (expression_new -> NEW variable_type .)
    DIVIDE          reduce using rule 78 (expression_new -> NEW variable_type .)
    MODULO          reduce using rule 78 (expression_new -> NEW variable_type .)
    EQ              reduce using rule 78 (expression_new -> NEW variable_type .)
    NEQ             reduce using rule 78 (expression_new -> NEW variable_type .)
    LT              reduce using rule 78 (expression_new -> NEW variable_type .)
    GT              reduce using rule 78 (expression_new -> NEW variable_type .)
    LTE             reduce using rule 78 (expression_new -> NEW variable_type .)
    GTE             reduce using rule 78 (expression_new -> NEW variable_type .)
    AND             reduce using rule 78 (expression_new -> NEW variable_type .)
    OR              reduce using rule 78 (expression_new -> NEW variable_type .)
    DOT             reduce using rule 78 (expression_new -> NEW variable_type .)
    RPAREN          reduce using rule 78 (expression_new -> NEW variable_type .)
    RBRAC           reduce using rule 78 (expression_new -> NEW variable_type .)
    COMMA           reduce using rule 78 (expression_new -> NEW variable_type .)
    LBRAC           shift and go to state 45

  ! LBRAC           [ reduce using rule 78 (expression_new -> NEW variable_type .) ]


state 96

    (38) statement_print -> PRINT LPAREN expression . RPAREN SEMICOLON
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    RPAREN          shift and go to state 123
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 97

    (39) statement_assignment -> IDENT ASSIGN expression . SEMICOLON
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       shift and go to state 124
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 98

    (40) statement_ifthen -> IF LPAREN expression . RPAREN statement
    (41) statement_ifthenelse -> IF LPAREN expression . RPAREN statement ELSE statement
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 99

    (42) statement_while -> WHILE LPAREN expression . RPAREN statement
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    RPAREN          shift and go to state 126
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 100

    (44) statement_compound -> LCURL body RCURL .

    RETURN          reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    PRINT           reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    IDENT           reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    IF              reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    WHILE           reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    LCURL           reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    BREAK           reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    $end            reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    RCURL           reduce using rule 44 (statement_compound -> LCURL body RCURL .)
    ELSE            reduce using rule 44 (statement_compound -> LCURL body RCURL .)


state 101

    (24) function -> FUNCTION variable_type IDENT LPAREN . optional_parameter_list RPAREN LCURL body RCURL
    (25) optional_parameter_list -> . empty
    (26) optional_parameter_list -> . parameter_list
    (2) empty -> .
    (27) parameter_list -> . variable_type IDENT
    (28) parameter_list -> . variable_type IDENT COMMA parameter_list
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    RPAREN          reduce using rule 2 (empty -> .)
    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 127
    optional_parameter_list        shift and go to state 128
    empty                          shift and go to state 129
    parameter_list                 shift and go to state 130

state 102

    (19) variables_list -> IDENT COMMA variables_list .

    VAR             reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    FUNCTION        reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    RETURN          reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    PRINT           reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    IDENT           reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    IF              reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    WHILE           reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    LCURL           reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    BREAK           reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)
    RCURL           reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)


state 103

    (62) expression_binop -> expression PLUS expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 62 (expression_binop -> expression PLUS expression .)
    PLUS            reduce using rule 62 (expression_binop -> expression PLUS expression .)
    MINUS           reduce using rule 62 (expression_binop -> expression PLUS expression .)
    EQ              reduce using rule 62 (expression_binop -> expression PLUS expression .)
    NEQ             reduce using rule 62 (expression_binop -> expression PLUS expression .)
    LT              reduce using rule 62 (expression_binop -> expression PLUS expression .)
    GT              reduce using rule 62 (expression_binop -> expression PLUS expression .)
    LTE             reduce using rule 62 (expression_binop -> expression PLUS expression .)
    GTE             reduce using rule 62 (expression_binop -> expression PLUS expression .)
    LBRAC           reduce using rule 62 (expression_binop -> expression PLUS expression .)
    DOT             reduce using rule 62 (expression_binop -> expression PLUS expression .)
    RPAREN          reduce using rule 62 (expression_binop -> expression PLUS expression .)
    RBRAC           reduce using rule 62 (expression_binop -> expression PLUS expression .)
    COMMA           reduce using rule 62 (expression_binop -> expression PLUS expression .)
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! MULTIPLY        [ reduce using rule 62 (expression_binop -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression_binop -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 62 (expression_binop -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 62 (expression_binop -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 62 (expression_binop -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 104

    (63) expression_binop -> expression MINUS expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 63 (expression_binop -> expression MINUS expression .)
    PLUS            reduce using rule 63 (expression_binop -> expression MINUS expression .)
    MINUS           reduce using rule 63 (expression_binop -> expression MINUS expression .)
    EQ              reduce using rule 63 (expression_binop -> expression MINUS expression .)
    NEQ             reduce using rule 63 (expression_binop -> expression MINUS expression .)
    LT              reduce using rule 63 (expression_binop -> expression MINUS expression .)
    GT              reduce using rule 63 (expression_binop -> expression MINUS expression .)
    LTE             reduce using rule 63 (expression_binop -> expression MINUS expression .)
    GTE             reduce using rule 63 (expression_binop -> expression MINUS expression .)
    LBRAC           reduce using rule 63 (expression_binop -> expression MINUS expression .)
    DOT             reduce using rule 63 (expression_binop -> expression MINUS expression .)
    RPAREN          reduce using rule 63 (expression_binop -> expression MINUS expression .)
    RBRAC           reduce using rule 63 (expression_binop -> expression MINUS expression .)
    COMMA           reduce using rule 63 (expression_binop -> expression MINUS expression .)
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! MULTIPLY        [ reduce using rule 63 (expression_binop -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression_binop -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 63 (expression_binop -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 63 (expression_binop -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 63 (expression_binop -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 105

    (64) expression_binop -> expression MULTIPLY expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    PLUS            reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    MINUS           reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    EQ              reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    NEQ             reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    LT              reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    GT              reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    LTE             reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    GTE             reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    LBRAC           reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    DOT             reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    RBRAC           reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    COMMA           reduce using rule 64 (expression_binop -> expression MULTIPLY expression .)
    MODULO          shift and go to state 81
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! MODULO          [ reduce using rule 64 (expression_binop -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 64 (expression_binop -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 64 (expression_binop -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MULTIPLY        [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 106

    (65) expression_binop -> expression DIVIDE expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    PLUS            reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    MINUS           reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    EQ              reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    NEQ             reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    LT              reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    GT              reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    LTE             reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    GTE             reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    LBRAC           reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    DOT             reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    RPAREN          reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    RBRAC           reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    COMMA           reduce using rule 65 (expression_binop -> expression DIVIDE expression .)
    MODULO          shift and go to state 81
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! MODULO          [ reduce using rule 65 (expression_binop -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 65 (expression_binop -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 65 (expression_binop -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MULTIPLY        [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 107

    (66) expression_binop -> expression MODULO expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 66 (expression_binop -> expression MODULO expression .)
    PLUS            reduce using rule 66 (expression_binop -> expression MODULO expression .)
    MINUS           reduce using rule 66 (expression_binop -> expression MODULO expression .)
    MULTIPLY        reduce using rule 66 (expression_binop -> expression MODULO expression .)
    DIVIDE          reduce using rule 66 (expression_binop -> expression MODULO expression .)
    EQ              reduce using rule 66 (expression_binop -> expression MODULO expression .)
    NEQ             reduce using rule 66 (expression_binop -> expression MODULO expression .)
    LT              reduce using rule 66 (expression_binop -> expression MODULO expression .)
    GT              reduce using rule 66 (expression_binop -> expression MODULO expression .)
    LTE             reduce using rule 66 (expression_binop -> expression MODULO expression .)
    GTE             reduce using rule 66 (expression_binop -> expression MODULO expression .)
    LBRAC           reduce using rule 66 (expression_binop -> expression MODULO expression .)
    DOT             reduce using rule 66 (expression_binop -> expression MODULO expression .)
    RPAREN          reduce using rule 66 (expression_binop -> expression MODULO expression .)
    RBRAC           reduce using rule 66 (expression_binop -> expression MODULO expression .)
    COMMA           reduce using rule 66 (expression_binop -> expression MODULO expression .)
    MODULO          shift and go to state 81
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! MODULO          [ reduce using rule 66 (expression_binop -> expression MODULO expression .) ]
  ! AND             [ reduce using rule 66 (expression_binop -> expression MODULO expression .) ]
  ! OR              [ reduce using rule 66 (expression_binop -> expression MODULO expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MULTIPLY        [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 108

    (67) expression_binop -> expression EQ expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 67 (expression_binop -> expression EQ expression .)
    LBRAC           reduce using rule 67 (expression_binop -> expression EQ expression .)
    DOT             reduce using rule 67 (expression_binop -> expression EQ expression .)
    RPAREN          reduce using rule 67 (expression_binop -> expression EQ expression .)
    RBRAC           reduce using rule 67 (expression_binop -> expression EQ expression .)
    COMMA           reduce using rule 67 (expression_binop -> expression EQ expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! PLUS            [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! MULTIPLY        [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! MODULO          [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! LT              [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! GT              [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! AND             [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! OR              [ reduce using rule 67 (expression_binop -> expression EQ expression .) ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 109

    (68) expression_binop -> expression NEQ expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 68 (expression_binop -> expression NEQ expression .)
    LBRAC           reduce using rule 68 (expression_binop -> expression NEQ expression .)
    DOT             reduce using rule 68 (expression_binop -> expression NEQ expression .)
    RPAREN          reduce using rule 68 (expression_binop -> expression NEQ expression .)
    RBRAC           reduce using rule 68 (expression_binop -> expression NEQ expression .)
    COMMA           reduce using rule 68 (expression_binop -> expression NEQ expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! PLUS            [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! MODULO          [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! AND             [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! OR              [ reduce using rule 68 (expression_binop -> expression NEQ expression .) ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 110

    (69) expression_binop -> expression LT expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 69 (expression_binop -> expression LT expression .)
    LBRAC           reduce using rule 69 (expression_binop -> expression LT expression .)
    DOT             reduce using rule 69 (expression_binop -> expression LT expression .)
    RPAREN          reduce using rule 69 (expression_binop -> expression LT expression .)
    RBRAC           reduce using rule 69 (expression_binop -> expression LT expression .)
    COMMA           reduce using rule 69 (expression_binop -> expression LT expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! PLUS            [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! EQ              [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! LT              [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! GT              [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! LTE             [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! GTE             [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! AND             [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! OR              [ reduce using rule 69 (expression_binop -> expression LT expression .) ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 111

    (70) expression_binop -> expression GT expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 70 (expression_binop -> expression GT expression .)
    LBRAC           reduce using rule 70 (expression_binop -> expression GT expression .)
    DOT             reduce using rule 70 (expression_binop -> expression GT expression .)
    RPAREN          reduce using rule 70 (expression_binop -> expression GT expression .)
    RBRAC           reduce using rule 70 (expression_binop -> expression GT expression .)
    COMMA           reduce using rule 70 (expression_binop -> expression GT expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! PLUS            [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! EQ              [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! LT              [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! GT              [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! LTE             [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! GTE             [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! AND             [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! OR              [ reduce using rule 70 (expression_binop -> expression GT expression .) ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 112

    (71) expression_binop -> expression LTE expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 71 (expression_binop -> expression LTE expression .)
    LBRAC           reduce using rule 71 (expression_binop -> expression LTE expression .)
    DOT             reduce using rule 71 (expression_binop -> expression LTE expression .)
    RPAREN          reduce using rule 71 (expression_binop -> expression LTE expression .)
    RBRAC           reduce using rule 71 (expression_binop -> expression LTE expression .)
    COMMA           reduce using rule 71 (expression_binop -> expression LTE expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! PLUS            [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! MODULO          [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! LT              [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! GT              [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! AND             [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! OR              [ reduce using rule 71 (expression_binop -> expression LTE expression .) ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 113

    (72) expression_binop -> expression GTE expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 72 (expression_binop -> expression GTE expression .)
    LBRAC           reduce using rule 72 (expression_binop -> expression GTE expression .)
    DOT             reduce using rule 72 (expression_binop -> expression GTE expression .)
    RPAREN          reduce using rule 72 (expression_binop -> expression GTE expression .)
    RBRAC           reduce using rule 72 (expression_binop -> expression GTE expression .)
    COMMA           reduce using rule 72 (expression_binop -> expression GTE expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! PLUS            [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! MODULO          [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! LT              [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! GT              [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! AND             [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! OR              [ reduce using rule 72 (expression_binop -> expression GTE expression .) ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 114

    (73) expression_binop -> expression AND expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 73 (expression_binop -> expression AND expression .)
    PLUS            reduce using rule 73 (expression_binop -> expression AND expression .)
    MINUS           reduce using rule 73 (expression_binop -> expression AND expression .)
    MULTIPLY        reduce using rule 73 (expression_binop -> expression AND expression .)
    DIVIDE          reduce using rule 73 (expression_binop -> expression AND expression .)
    MODULO          reduce using rule 73 (expression_binop -> expression AND expression .)
    EQ              reduce using rule 73 (expression_binop -> expression AND expression .)
    NEQ             reduce using rule 73 (expression_binop -> expression AND expression .)
    LT              reduce using rule 73 (expression_binop -> expression AND expression .)
    GT              reduce using rule 73 (expression_binop -> expression AND expression .)
    LTE             reduce using rule 73 (expression_binop -> expression AND expression .)
    GTE             reduce using rule 73 (expression_binop -> expression AND expression .)
    AND             reduce using rule 73 (expression_binop -> expression AND expression .)
    OR              reduce using rule 73 (expression_binop -> expression AND expression .)
    LBRAC           reduce using rule 73 (expression_binop -> expression AND expression .)
    DOT             reduce using rule 73 (expression_binop -> expression AND expression .)
    RPAREN          reduce using rule 73 (expression_binop -> expression AND expression .)
    RBRAC           reduce using rule 73 (expression_binop -> expression AND expression .)
    COMMA           reduce using rule 73 (expression_binop -> expression AND expression .)

  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MULTIPLY        [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULO          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 115

    (74) expression_binop -> expression OR expression .
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    SEMICOLON       reduce using rule 74 (expression_binop -> expression OR expression .)
    PLUS            reduce using rule 74 (expression_binop -> expression OR expression .)
    MINUS           reduce using rule 74 (expression_binop -> expression OR expression .)
    MULTIPLY        reduce using rule 74 (expression_binop -> expression OR expression .)
    DIVIDE          reduce using rule 74 (expression_binop -> expression OR expression .)
    MODULO          reduce using rule 74 (expression_binop -> expression OR expression .)
    EQ              reduce using rule 74 (expression_binop -> expression OR expression .)
    NEQ             reduce using rule 74 (expression_binop -> expression OR expression .)
    LT              reduce using rule 74 (expression_binop -> expression OR expression .)
    GT              reduce using rule 74 (expression_binop -> expression OR expression .)
    LTE             reduce using rule 74 (expression_binop -> expression OR expression .)
    GTE             reduce using rule 74 (expression_binop -> expression OR expression .)
    OR              reduce using rule 74 (expression_binop -> expression OR expression .)
    LBRAC           reduce using rule 74 (expression_binop -> expression OR expression .)
    DOT             reduce using rule 74 (expression_binop -> expression OR expression .)
    RPAREN          reduce using rule 74 (expression_binop -> expression OR expression .)
    RBRAC           reduce using rule 74 (expression_binop -> expression OR expression .)
    COMMA           reduce using rule 74 (expression_binop -> expression OR expression .)
    AND             shift and go to state 88

  ! AND             [ reduce using rule 74 (expression_binop -> expression OR expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MULTIPLY        [ shift and go to state 79 ]
  ! DIVIDE          [ shift and go to state 80 ]
  ! MODULO          [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! NEQ             [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 86 ]
  ! GTE             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 89 ]
  ! LBRAC           [ shift and go to state 90 ]
  ! DOT             [ shift and go to state 91 ]


state 116

    (79) expression_index -> expression LBRAC expression . RBRAC
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    RBRAC           shift and go to state 131
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 117

    (80) expression_dot -> expression DOT IDENT .

    SEMICOLON       reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    PLUS            reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    MINUS           reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    MULTIPLY        reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    DIVIDE          reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    MODULO          reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    EQ              reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    NEQ             reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    LT              reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    GT              reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    LTE             reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    GTE             reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    AND             reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    OR              reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    LBRAC           reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    DOT             reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    RPAREN          reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    RBRAC           reduce using rule 80 (expression_dot -> expression DOT IDENT .)
    COMMA           reduce using rule 80 (expression_dot -> expression DOT IDENT .)


state 118

    (61) expression_call -> IDENT LPAREN optional_expression_list . RPAREN

    RPAREN          shift and go to state 132


state 119

    (76) optional_expression_list -> empty .

    RPAREN          reduce using rule 76 (optional_expression_list -> empty .)


state 120

    (77) optional_expression_list -> expression_list .

    RPAREN          reduce using rule 77 (optional_expression_list -> expression_list .)


state 121

    (81) expression_list -> expression .
    (82) expression_list -> expression . COMMA expression_list
    (62) expression_binop -> expression . PLUS expression
    (63) expression_binop -> expression . MINUS expression
    (64) expression_binop -> expression . MULTIPLY expression
    (65) expression_binop -> expression . DIVIDE expression
    (66) expression_binop -> expression . MODULO expression
    (67) expression_binop -> expression . EQ expression
    (68) expression_binop -> expression . NEQ expression
    (69) expression_binop -> expression . LT expression
    (70) expression_binop -> expression . GT expression
    (71) expression_binop -> expression . LTE expression
    (72) expression_binop -> expression . GTE expression
    (73) expression_binop -> expression . AND expression
    (74) expression_binop -> expression . OR expression
    (79) expression_index -> expression . LBRAC expression RBRAC
    (80) expression_dot -> expression . DOT IDENT

    RPAREN          reduce using rule 81 (expression_list -> expression .)
    COMMA           shift and go to state 133
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MULTIPLY        shift and go to state 79
    DIVIDE          shift and go to state 80
    MODULO          shift and go to state 81
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LT              shift and go to state 84
    GT              shift and go to state 85
    LTE             shift and go to state 86
    GTE             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LBRAC           shift and go to state 90
    DOT             shift and go to state 91


state 122

    (75) expression_group -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    EQ              reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    LT              reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    GT              reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    LTE             reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    GTE             reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    AND             reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    OR              reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    LBRAC           reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    DOT             reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    RBRAC           reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 75 (expression_group -> LPAREN expression RPAREN .)


state 123

    (38) statement_print -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 134


state 124

    (39) statement_assignment -> IDENT ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    IDENT           reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    IF              reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    LCURL           reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    $end            reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    RCURL           reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 39 (statement_assignment -> IDENT ASSIGN expression SEMICOLON .)


state 125

    (40) statement_ifthen -> IF LPAREN expression RPAREN . statement
    (41) statement_ifthenelse -> IF LPAREN expression RPAREN . statement ELSE statement
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthen
    (33) statement -> . statement_ifthenelse
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement_return -> . RETURN expression SEMICOLON
    (38) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (39) statement_assignment -> . IDENT ASSIGN expression SEMICOLON
    (40) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (41) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement_while -> . WHILE LPAREN expression RPAREN statement
    (44) statement_compound -> . LCURL body RCURL
    (43) statement_break -> . BREAK

    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IDENT           shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    LCURL           shift and go to state 40
    BREAK           shift and go to state 41

    statement                      shift and go to state 135
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthen               shift and go to state 30
    statement_ifthenelse           shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34

state 126

    (42) statement_while -> WHILE LPAREN expression RPAREN . statement
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthen
    (33) statement -> . statement_ifthenelse
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement_return -> . RETURN expression SEMICOLON
    (38) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (39) statement_assignment -> . IDENT ASSIGN expression SEMICOLON
    (40) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (41) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement_while -> . WHILE LPAREN expression RPAREN statement
    (44) statement_compound -> . LCURL body RCURL
    (43) statement_break -> . BREAK

    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IDENT           shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    LCURL           shift and go to state 40
    BREAK           shift and go to state 41

    statement                      shift and go to state 136
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthen               shift and go to state 30
    statement_ifthenelse           shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34

state 127

    (27) parameter_list -> variable_type . IDENT
    (28) parameter_list -> variable_type . IDENT COMMA parameter_list
    (17) variable_type -> variable_type . LBRAC RBRAC

    IDENT           shift and go to state 137
    LBRAC           shift and go to state 45


state 128

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list . RPAREN LCURL body RCURL

    RPAREN          shift and go to state 138


state 129

    (25) optional_parameter_list -> empty .

    RPAREN          reduce using rule 25 (optional_parameter_list -> empty .)


state 130

    (26) optional_parameter_list -> parameter_list .

    RPAREN          reduce using rule 26 (optional_parameter_list -> parameter_list .)


state 131

    (79) expression_index -> expression LBRAC expression RBRAC .

    SEMICOLON       reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    PLUS            reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    MINUS           reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    MULTIPLY        reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    DIVIDE          reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    MODULO          reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    EQ              reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    NEQ             reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    LT              reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    GT              reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    LTE             reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    GTE             reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    AND             reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    OR              reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    LBRAC           reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    DOT             reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    RPAREN          reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    RBRAC           reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)
    COMMA           reduce using rule 79 (expression_index -> expression LBRAC expression RBRAC .)


state 132

    (61) expression_call -> IDENT LPAREN optional_expression_list RPAREN .

    SEMICOLON       reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    PLUS            reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MINUS           reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MULTIPLY        reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    DIVIDE          reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MODULO          reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    EQ              reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    NEQ             reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LT              reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    GT              reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LTE             reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    GTE             reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    AND             reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    OR              reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LBRAC           reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    DOT             reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    RPAREN          reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    RBRAC           reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    COMMA           reduce using rule 61 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)


state 133

    (82) expression_list -> expression COMMA . expression_list
    (81) expression_list -> . expression
    (82) expression_list -> . expression COMMA expression_list
    (47) expression -> . expression_integer
    (48) expression -> . expression_boolean
    (49) expression -> . expression_identifier
    (50) expression -> . expression_call
    (51) expression -> . expression_binop
    (52) expression -> . expression_group
    (53) expression -> . expression_neg
    (54) expression -> . expression_new
    (55) expression -> . expression_index
    (56) expression -> . expression_dot
    (57) expression_integer -> . INT
    (58) expression_boolean -> . BOOL
    (60) expression_identifier -> . IDENT
    (61) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (62) expression_binop -> . expression PLUS expression
    (63) expression_binop -> . expression MINUS expression
    (64) expression_binop -> . expression MULTIPLY expression
    (65) expression_binop -> . expression DIVIDE expression
    (66) expression_binop -> . expression MODULO expression
    (67) expression_binop -> . expression EQ expression
    (68) expression_binop -> . expression NEQ expression
    (69) expression_binop -> . expression LT expression
    (70) expression_binop -> . expression GT expression
    (71) expression_binop -> . expression LTE expression
    (72) expression_binop -> . expression GTE expression
    (73) expression_binop -> . expression AND expression
    (74) expression_binop -> . expression OR expression
    (75) expression_group -> . LPAREN expression RPAREN
    (59) expression_neg -> . NOT expression
    (78) expression_new -> . NEW variable_type
    (79) expression_index -> . expression LBRAC expression RBRAC
    (80) expression_dot -> . expression DOT IDENT

    INT             shift and go to state 60
    BOOL            shift and go to state 61
    IDENT           shift and go to state 62
    LPAREN          shift and go to state 63
    NOT             shift and go to state 64
    NEW             shift and go to state 65

    expression                     shift and go to state 121
    expression_list                shift and go to state 139
    expression_integer             shift and go to state 50
    expression_boolean             shift and go to state 51
    expression_identifier          shift and go to state 52
    expression_call                shift and go to state 53
    expression_binop               shift and go to state 54
    expression_group               shift and go to state 55
    expression_neg                 shift and go to state 56
    expression_new                 shift and go to state 57
    expression_index               shift and go to state 58
    expression_dot                 shift and go to state 59

state 134

    (38) statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .

    RETURN          reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENT           reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LCURL           reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURL           reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 38 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 135

    (40) statement_ifthen -> IF LPAREN expression RPAREN statement .
    (41) statement_ifthenelse -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RETURN          reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    IDENT           reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    LCURL           reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    RCURL           reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 140

  ! ELSE            [ reduce using rule 40 (statement_ifthen -> IF LPAREN expression RPAREN statement .) ]


state 136

    (42) statement_while -> WHILE LPAREN expression RPAREN statement .

    RETURN          reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    IDENT           reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    LCURL           reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    RCURL           reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 42 (statement_while -> WHILE LPAREN expression RPAREN statement .)


state 137

    (27) parameter_list -> variable_type IDENT .
    (28) parameter_list -> variable_type IDENT . COMMA parameter_list

    RPAREN          reduce using rule 27 (parameter_list -> variable_type IDENT .)
    COMMA           shift and go to state 141


state 138

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN . LCURL body RCURL

    LCURL           shift and go to state 142


state 139

    (82) expression_list -> expression COMMA expression_list .

    RPAREN          reduce using rule 82 (expression_list -> expression COMMA expression_list .)


state 140

    (41) statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE . statement
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthen
    (33) statement -> . statement_ifthenelse
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement_return -> . RETURN expression SEMICOLON
    (38) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (39) statement_assignment -> . IDENT ASSIGN expression SEMICOLON
    (40) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (41) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (42) statement_while -> . WHILE LPAREN expression RPAREN statement
    (44) statement_compound -> . LCURL body RCURL
    (43) statement_break -> . BREAK

    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IDENT           shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    LCURL           shift and go to state 40
    BREAK           shift and go to state 41

    statement                      shift and go to state 143
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthen               shift and go to state 30
    statement_ifthenelse           shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34

state 141

    (28) parameter_list -> variable_type IDENT COMMA . parameter_list
    (27) parameter_list -> . variable_type IDENT
    (28) parameter_list -> . variable_type IDENT COMMA parameter_list
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 127
    parameter_list                 shift and go to state 144

state 142

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL . body RCURL
    (3) body -> . optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
    (4) optional_class_declaration_list -> . empty
    (5) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 7

    body                           shift and go to state 145
    optional_class_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    class_declaration_list         shift and go to state 5
    class_declaration              shift and go to state 6

state 143

    (41) statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .

    RETURN          reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENT           reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCURL           reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCURL           reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 41 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)


state 144

    (28) parameter_list -> variable_type IDENT COMMA parameter_list .

    RPAREN          reduce using rule 28 (parameter_list -> variable_type IDENT COMMA parameter_list .)


state 145

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body . RCURL

    RCURL           shift and go to state 146


state 146

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .

    FUNCTION        reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    RETURN          reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    PRINT           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    IDENT           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    IF              reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    WHILE           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    LCURL           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    BREAK           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for LTE in state 94 resolved as shift
WARNING: shift/reduce conflict for GTE in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for LBRAC in state 94 resolved as shift
WARNING: shift/reduce conflict for DOT in state 94 resolved as shift
WARNING: shift/reduce conflict for LBRAC in state 95 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 135 resolved as shift
