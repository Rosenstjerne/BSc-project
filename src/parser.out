Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> body
Rule 2     empty -> <empty>
Rule 3     body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
Rule 4     optional_class_declaration_list -> empty
Rule 5     optional_class_declaration_list -> class_declaration_list
Rule 6     class_declaration_list -> class_declaration
Rule 7     class_declaration_list -> class_declaration class_declaration_list
Rule 8     class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL
Rule 9     optional_variables_declaration_list -> empty
Rule 10    optional_variables_declaration_list -> variables_declaration_list
Rule 11    variables_declaration_list -> VAR variable_type variables_list SEMICOLON
Rule 12    variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list
Rule 13    variable_type -> _BOOL
Rule 14    variable_type -> _INT
Rule 15    variable_type -> NULL
Rule 16    variable_type -> IDENT
Rule 17    variable_type -> variable_type LBRAC RBRAC
Rule 18    variables_list -> IDENT
Rule 19    variables_list -> IDENT COMMA variables_list
Rule 20    optional_functions_declaration_list -> empty
Rule 21    optional_functions_declaration_list -> functions_declaration_list
Rule 22    functions_declaration_list -> function
Rule 23    functions_declaration_list -> function functions_declaration_list
Rule 24    function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
Rule 25    optional_parameter_list -> empty
Rule 26    optional_parameter_list -> parameter_list
Rule 27    parameter_list -> variable_type IDENT
Rule 28    parameter_list -> variable_type IDENT COMMA parameter_list
Rule 29    statement -> statement_return
Rule 30    statement -> statement_print
Rule 31    statement -> statement_assignment
Rule 32    statement -> statement_ifthenelse
Rule 33    statement -> statement_ifthen
Rule 34    statement -> statement_while
Rule 35    statement -> statement_compound
Rule 36    statement -> statement_break
Rule 37    statement -> statement_expression
Rule 38    statement_return -> RETURN expression SEMICOLON
Rule 39    statement_print -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 40    statement_assignment -> variable ASSIGN expression SEMICOLON
Rule 41    variable -> IDENT
Rule 42    variable -> expression DOT IDENT
Rule 43    variable -> expression LBRAC expression RBRAC
Rule 44    statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement
Rule 45    statement_ifthen -> IF LPAREN expression RPAREN statement
Rule 46    statement_while -> WHILE LPAREN expression RPAREN statement
Rule 47    statement_break -> BREAK SEMICOLON
Rule 48    statement_expression -> expression SEMICOLON
Rule 49    statement_compound -> LCURL body RCURL
Rule 50    statement_list -> statement
Rule 51    statement_list -> statement statement_list
Rule 52    expression -> expression_integer
Rule 53    expression -> expression_boolean
Rule 54    expression -> expression_identifier
Rule 55    expression -> expression_call
Rule 56    expression -> expression_binop
Rule 57    expression -> expression_group
Rule 58    expression -> expression_neg
Rule 59    expression -> expression_negative
Rule 60    expression -> expression_new
Rule 61    expression_integer -> INT
Rule 62    expression_boolean -> BOOL
Rule 63    expression_neg -> NOT expression
Rule 64    expression_negative -> MINUS expression
Rule 65    expression_identifier -> variable
Rule 66    expression_call -> IDENT LPAREN optional_expression_list RPAREN
Rule 67    optional_expression_list -> empty
Rule 68    optional_expression_list -> expression_list
Rule 69    expression_list -> expression
Rule 70    expression_list -> expression COMMA expression_list
Rule 71    expression_binop -> expression PLUS expression
Rule 72    expression_binop -> expression MINUS expression
Rule 73    expression_binop -> expression MULTIPLY expression
Rule 74    expression_binop -> expression DIVIDE expression
Rule 75    expression_binop -> expression MODULO expression
Rule 76    expression_binop -> expression EQ expression
Rule 77    expression_binop -> expression NEQ expression
Rule 78    expression_binop -> expression LT expression
Rule 79    expression_binop -> expression GT expression
Rule 80    expression_binop -> expression LTE expression
Rule 81    expression_binop -> expression GTE expression
Rule 82    expression_binop -> expression AND expression
Rule 83    expression_binop -> expression OR expression
Rule 84    expression_group -> LPAREN expression RPAREN
Rule 85    expression_new -> NEW variable_type
Rule 86    expression_new -> NEW variable_type LBRAC expression RBRAC

Terminals, with rules where they appear

AND                  : 82
ASSIGN               : 40
BOOL                 : 62
BREAK                : 47
CLASS                : 8
COMMA                : 19 28 70
DIVIDE               : 74
DOT                  : 42
ELSE                 : 44
EQ                   : 76
FUNCTION             : 24
GT                   : 79
GTE                  : 81
IDENT                : 8 16 18 19 24 27 28 41 42 66
IF                   : 44 45
INT                  : 61
LBRAC                : 17 43 86
LCURL                : 8 24 49
LPAREN               : 24 39 44 45 46 66 84
LT                   : 78
LTE                  : 80
MINUS                : 64 72
MODULO               : 75
MULTIPLY             : 73
NEQ                  : 77
NEW                  : 85 86
NOT                  : 63
NULL                 : 15
OR                   : 83
PLUS                 : 71
PRINT                : 39
RBRAC                : 17 43 86
RCURL                : 8 24 49
RETURN               : 38
RPAREN               : 24 39 44 45 46 66 84
SEMICOLON            : 11 12 38 39 40 47 48
VAR                  : 11 12
WHILE                : 46
_BOOL                : 13
_INT                 : 14
error                : 

Nonterminals, with rules where they appear

body                 : 1 24 49
class_declaration    : 6 7
class_declaration_list : 5 7
empty                : 4 9 20 25 67
expression           : 38 39 40 42 43 43 44 45 46 48 63 64 69 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 86
expression_binop     : 56
expression_boolean   : 53
expression_call      : 55
expression_group     : 57
expression_identifier : 54
expression_integer   : 52
expression_list      : 68 70
expression_neg       : 58
expression_negative  : 59
expression_new       : 60
function             : 22 23
functions_declaration_list : 21 23
optional_class_declaration_list : 3
optional_expression_list : 66
optional_functions_declaration_list : 3
optional_parameter_list : 24
optional_variables_declaration_list : 3
parameter_list       : 26 28
program              : 0
statement            : 44 44 45 46 50 51
statement_assignment : 31
statement_break      : 36
statement_compound   : 35
statement_expression : 37
statement_ifthen     : 33
statement_ifthenelse : 32
statement_list       : 3 51
statement_print      : 30
statement_return     : 29
statement_while      : 34
variable             : 40 65
variable_type        : 11 12 17 24 27 28 85 86
variables_declaration_list : 8 10 12
variables_list       : 11 12 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . body
    (3) body -> . optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
    (4) optional_class_declaration_list -> . empty
    (5) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 7

    program                        shift and go to state 1
    body                           shift and go to state 2
    optional_class_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    class_declaration_list         shift and go to state 5
    class_declaration              shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> body .

    $end            reduce using rule 1 (program -> body .)


state 3

    (3) body -> optional_class_declaration_list . optional_variables_declaration_list optional_functions_declaration_list statement_list
    (9) optional_variables_declaration_list -> . empty
    (10) optional_variables_declaration_list -> . variables_declaration_list
    (2) empty -> .
    (11) variables_declaration_list -> . VAR variable_type variables_list SEMICOLON
    (12) variables_declaration_list -> . VAR variable_type variables_list SEMICOLON variables_declaration_list

    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    VAR             shift and go to state 11

    optional_variables_declaration_list shift and go to state 8
    empty                          shift and go to state 9
    variables_declaration_list     shift and go to state 10

state 4

    (4) optional_class_declaration_list -> empty .

    VAR             reduce using rule 4 (optional_class_declaration_list -> empty .)
    FUNCTION        reduce using rule 4 (optional_class_declaration_list -> empty .)
    RETURN          reduce using rule 4 (optional_class_declaration_list -> empty .)
    PRINT           reduce using rule 4 (optional_class_declaration_list -> empty .)
    IF              reduce using rule 4 (optional_class_declaration_list -> empty .)
    WHILE           reduce using rule 4 (optional_class_declaration_list -> empty .)
    LCURL           reduce using rule 4 (optional_class_declaration_list -> empty .)
    BREAK           reduce using rule 4 (optional_class_declaration_list -> empty .)
    IDENT           reduce using rule 4 (optional_class_declaration_list -> empty .)
    INT             reduce using rule 4 (optional_class_declaration_list -> empty .)
    BOOL            reduce using rule 4 (optional_class_declaration_list -> empty .)
    LPAREN          reduce using rule 4 (optional_class_declaration_list -> empty .)
    NOT             reduce using rule 4 (optional_class_declaration_list -> empty .)
    MINUS           reduce using rule 4 (optional_class_declaration_list -> empty .)
    NEW             reduce using rule 4 (optional_class_declaration_list -> empty .)


state 5

    (5) optional_class_declaration_list -> class_declaration_list .

    VAR             reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    FUNCTION        reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    RETURN          reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    PRINT           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    IF              reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    WHILE           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    LCURL           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    BREAK           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    IDENT           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    INT             reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    BOOL            reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    LPAREN          reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    NOT             reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    MINUS           reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)
    NEW             reduce using rule 5 (optional_class_declaration_list -> class_declaration_list .)


state 6

    (6) class_declaration_list -> class_declaration .
    (7) class_declaration_list -> class_declaration . class_declaration_list
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 6 (class_declaration_list -> class_declaration .)
    FUNCTION        reduce using rule 6 (class_declaration_list -> class_declaration .)
    RETURN          reduce using rule 6 (class_declaration_list -> class_declaration .)
    PRINT           reduce using rule 6 (class_declaration_list -> class_declaration .)
    IF              reduce using rule 6 (class_declaration_list -> class_declaration .)
    WHILE           reduce using rule 6 (class_declaration_list -> class_declaration .)
    LCURL           reduce using rule 6 (class_declaration_list -> class_declaration .)
    BREAK           reduce using rule 6 (class_declaration_list -> class_declaration .)
    IDENT           reduce using rule 6 (class_declaration_list -> class_declaration .)
    INT             reduce using rule 6 (class_declaration_list -> class_declaration .)
    BOOL            reduce using rule 6 (class_declaration_list -> class_declaration .)
    LPAREN          reduce using rule 6 (class_declaration_list -> class_declaration .)
    NOT             reduce using rule 6 (class_declaration_list -> class_declaration .)
    MINUS           reduce using rule 6 (class_declaration_list -> class_declaration .)
    NEW             reduce using rule 6 (class_declaration_list -> class_declaration .)
    CLASS           shift and go to state 7

    class_declaration              shift and go to state 6
    class_declaration_list         shift and go to state 12

state 7

    (8) class_declaration -> CLASS . IDENT LCURL variables_declaration_list RCURL

    IDENT           shift and go to state 13


state 8

    (3) body -> optional_class_declaration_list optional_variables_declaration_list . optional_functions_declaration_list statement_list
    (20) optional_functions_declaration_list -> . empty
    (21) optional_functions_declaration_list -> . functions_declaration_list
    (2) empty -> .
    (22) functions_declaration_list -> . function
    (23) functions_declaration_list -> . function functions_declaration_list
    (24) function -> . FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    FUNCTION        shift and go to state 18

    optional_functions_declaration_list shift and go to state 14
    empty                          shift and go to state 15
    functions_declaration_list     shift and go to state 16
    function                       shift and go to state 17

state 9

    (9) optional_variables_declaration_list -> empty .

    FUNCTION        reduce using rule 9 (optional_variables_declaration_list -> empty .)
    RETURN          reduce using rule 9 (optional_variables_declaration_list -> empty .)
    PRINT           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    IF              reduce using rule 9 (optional_variables_declaration_list -> empty .)
    WHILE           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    LCURL           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    BREAK           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    IDENT           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    INT             reduce using rule 9 (optional_variables_declaration_list -> empty .)
    BOOL            reduce using rule 9 (optional_variables_declaration_list -> empty .)
    LPAREN          reduce using rule 9 (optional_variables_declaration_list -> empty .)
    NOT             reduce using rule 9 (optional_variables_declaration_list -> empty .)
    MINUS           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    NEW             reduce using rule 9 (optional_variables_declaration_list -> empty .)


state 10

    (10) optional_variables_declaration_list -> variables_declaration_list .

    FUNCTION        reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    RETURN          reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    PRINT           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    IF              reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    WHILE           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    LCURL           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    BREAK           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    IDENT           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    INT             reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    BOOL            reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    LPAREN          reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    NOT             reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    MINUS           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    NEW             reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)


state 11

    (11) variables_declaration_list -> VAR . variable_type variables_list SEMICOLON
    (12) variables_declaration_list -> VAR . variable_type variables_list SEMICOLON variables_declaration_list
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 19

state 12

    (7) class_declaration_list -> class_declaration class_declaration_list .

    VAR             reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    FUNCTION        reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    RETURN          reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    PRINT           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    IF              reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    WHILE           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    LCURL           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    BREAK           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    IDENT           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    INT             reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    BOOL            reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    LPAREN          reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    NOT             reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    MINUS           reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)
    NEW             reduce using rule 7 (class_declaration_list -> class_declaration class_declaration_list .)


state 13

    (8) class_declaration -> CLASS IDENT . LCURL variables_declaration_list RCURL

    LCURL           shift and go to state 24


state 14

    (3) body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list . statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement statement_list
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthenelse
    (33) statement -> . statement_ifthen
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement -> . statement_expression
    (38) statement_return -> . RETURN expression SEMICOLON
    (39) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (40) statement_assignment -> . variable ASSIGN expression SEMICOLON
    (44) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (46) statement_while -> . WHILE LPAREN expression RPAREN statement
    (49) statement_compound -> . LCURL body RCURL
    (47) statement_break -> . BREAK SEMICOLON
    (48) statement_expression -> . expression SEMICOLON
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC

    RETURN          shift and go to state 36
    PRINT           shift and go to state 38
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    LCURL           shift and go to state 43
    BREAK           shift and go to state 44
    IDENT           shift and go to state 45
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    statement_list                 shift and go to state 25
    statement                      shift and go to state 26
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthenelse           shift and go to state 30
    statement_ifthen               shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34
    statement_expression           shift and go to state 35
    expression                     shift and go to state 37
    variable                       shift and go to state 40
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54

state 15

    (20) optional_functions_declaration_list -> empty .

    RETURN          reduce using rule 20 (optional_functions_declaration_list -> empty .)
    PRINT           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    IF              reduce using rule 20 (optional_functions_declaration_list -> empty .)
    WHILE           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    LCURL           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    BREAK           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    IDENT           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    INT             reduce using rule 20 (optional_functions_declaration_list -> empty .)
    BOOL            reduce using rule 20 (optional_functions_declaration_list -> empty .)
    LPAREN          reduce using rule 20 (optional_functions_declaration_list -> empty .)
    NOT             reduce using rule 20 (optional_functions_declaration_list -> empty .)
    MINUS           reduce using rule 20 (optional_functions_declaration_list -> empty .)
    NEW             reduce using rule 20 (optional_functions_declaration_list -> empty .)


state 16

    (21) optional_functions_declaration_list -> functions_declaration_list .

    RETURN          reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    PRINT           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    IF              reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    WHILE           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    LCURL           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    BREAK           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    IDENT           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    INT             reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    BOOL            reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    LPAREN          reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    NOT             reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    MINUS           reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)
    NEW             reduce using rule 21 (optional_functions_declaration_list -> functions_declaration_list .)


state 17

    (22) functions_declaration_list -> function .
    (23) functions_declaration_list -> function . functions_declaration_list
    (22) functions_declaration_list -> . function
    (23) functions_declaration_list -> . function functions_declaration_list
    (24) function -> . FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    RETURN          reduce using rule 22 (functions_declaration_list -> function .)
    PRINT           reduce using rule 22 (functions_declaration_list -> function .)
    IF              reduce using rule 22 (functions_declaration_list -> function .)
    WHILE           reduce using rule 22 (functions_declaration_list -> function .)
    LCURL           reduce using rule 22 (functions_declaration_list -> function .)
    BREAK           reduce using rule 22 (functions_declaration_list -> function .)
    IDENT           reduce using rule 22 (functions_declaration_list -> function .)
    INT             reduce using rule 22 (functions_declaration_list -> function .)
    BOOL            reduce using rule 22 (functions_declaration_list -> function .)
    LPAREN          reduce using rule 22 (functions_declaration_list -> function .)
    NOT             reduce using rule 22 (functions_declaration_list -> function .)
    MINUS           reduce using rule 22 (functions_declaration_list -> function .)
    NEW             reduce using rule 22 (functions_declaration_list -> function .)
    FUNCTION        shift and go to state 18

    function                       shift and go to state 17
    functions_declaration_list     shift and go to state 60

state 18

    (24) function -> FUNCTION . variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 61

state 19

    (11) variables_declaration_list -> VAR variable_type . variables_list SEMICOLON
    (12) variables_declaration_list -> VAR variable_type . variables_list SEMICOLON variables_declaration_list
    (17) variable_type -> variable_type . LBRAC RBRAC
    (18) variables_list -> . IDENT
    (19) variables_list -> . IDENT COMMA variables_list

    LBRAC           shift and go to state 63
    IDENT           shift and go to state 64

    variables_list                 shift and go to state 62

state 20

    (13) variable_type -> _BOOL .

    LBRAC           reduce using rule 13 (variable_type -> _BOOL .)
    IDENT           reduce using rule 13 (variable_type -> _BOOL .)
    SEMICOLON       reduce using rule 13 (variable_type -> _BOOL .)
    DOT             reduce using rule 13 (variable_type -> _BOOL .)
    PLUS            reduce using rule 13 (variable_type -> _BOOL .)
    MINUS           reduce using rule 13 (variable_type -> _BOOL .)
    MULTIPLY        reduce using rule 13 (variable_type -> _BOOL .)
    DIVIDE          reduce using rule 13 (variable_type -> _BOOL .)
    MODULO          reduce using rule 13 (variable_type -> _BOOL .)
    EQ              reduce using rule 13 (variable_type -> _BOOL .)
    NEQ             reduce using rule 13 (variable_type -> _BOOL .)
    LT              reduce using rule 13 (variable_type -> _BOOL .)
    GT              reduce using rule 13 (variable_type -> _BOOL .)
    LTE             reduce using rule 13 (variable_type -> _BOOL .)
    GTE             reduce using rule 13 (variable_type -> _BOOL .)
    AND             reduce using rule 13 (variable_type -> _BOOL .)
    OR              reduce using rule 13 (variable_type -> _BOOL .)
    RPAREN          reduce using rule 13 (variable_type -> _BOOL .)
    RBRAC           reduce using rule 13 (variable_type -> _BOOL .)
    COMMA           reduce using rule 13 (variable_type -> _BOOL .)


state 21

    (14) variable_type -> _INT .

    LBRAC           reduce using rule 14 (variable_type -> _INT .)
    IDENT           reduce using rule 14 (variable_type -> _INT .)
    SEMICOLON       reduce using rule 14 (variable_type -> _INT .)
    DOT             reduce using rule 14 (variable_type -> _INT .)
    PLUS            reduce using rule 14 (variable_type -> _INT .)
    MINUS           reduce using rule 14 (variable_type -> _INT .)
    MULTIPLY        reduce using rule 14 (variable_type -> _INT .)
    DIVIDE          reduce using rule 14 (variable_type -> _INT .)
    MODULO          reduce using rule 14 (variable_type -> _INT .)
    EQ              reduce using rule 14 (variable_type -> _INT .)
    NEQ             reduce using rule 14 (variable_type -> _INT .)
    LT              reduce using rule 14 (variable_type -> _INT .)
    GT              reduce using rule 14 (variable_type -> _INT .)
    LTE             reduce using rule 14 (variable_type -> _INT .)
    GTE             reduce using rule 14 (variable_type -> _INT .)
    AND             reduce using rule 14 (variable_type -> _INT .)
    OR              reduce using rule 14 (variable_type -> _INT .)
    RPAREN          reduce using rule 14 (variable_type -> _INT .)
    RBRAC           reduce using rule 14 (variable_type -> _INT .)
    COMMA           reduce using rule 14 (variable_type -> _INT .)


state 22

    (15) variable_type -> NULL .

    LBRAC           reduce using rule 15 (variable_type -> NULL .)
    IDENT           reduce using rule 15 (variable_type -> NULL .)
    SEMICOLON       reduce using rule 15 (variable_type -> NULL .)
    DOT             reduce using rule 15 (variable_type -> NULL .)
    PLUS            reduce using rule 15 (variable_type -> NULL .)
    MINUS           reduce using rule 15 (variable_type -> NULL .)
    MULTIPLY        reduce using rule 15 (variable_type -> NULL .)
    DIVIDE          reduce using rule 15 (variable_type -> NULL .)
    MODULO          reduce using rule 15 (variable_type -> NULL .)
    EQ              reduce using rule 15 (variable_type -> NULL .)
    NEQ             reduce using rule 15 (variable_type -> NULL .)
    LT              reduce using rule 15 (variable_type -> NULL .)
    GT              reduce using rule 15 (variable_type -> NULL .)
    LTE             reduce using rule 15 (variable_type -> NULL .)
    GTE             reduce using rule 15 (variable_type -> NULL .)
    AND             reduce using rule 15 (variable_type -> NULL .)
    OR              reduce using rule 15 (variable_type -> NULL .)
    RPAREN          reduce using rule 15 (variable_type -> NULL .)
    RBRAC           reduce using rule 15 (variable_type -> NULL .)
    COMMA           reduce using rule 15 (variable_type -> NULL .)


state 23

    (16) variable_type -> IDENT .

    LBRAC           reduce using rule 16 (variable_type -> IDENT .)
    IDENT           reduce using rule 16 (variable_type -> IDENT .)
    SEMICOLON       reduce using rule 16 (variable_type -> IDENT .)
    DOT             reduce using rule 16 (variable_type -> IDENT .)
    PLUS            reduce using rule 16 (variable_type -> IDENT .)
    MINUS           reduce using rule 16 (variable_type -> IDENT .)
    MULTIPLY        reduce using rule 16 (variable_type -> IDENT .)
    DIVIDE          reduce using rule 16 (variable_type -> IDENT .)
    MODULO          reduce using rule 16 (variable_type -> IDENT .)
    EQ              reduce using rule 16 (variable_type -> IDENT .)
    NEQ             reduce using rule 16 (variable_type -> IDENT .)
    LT              reduce using rule 16 (variable_type -> IDENT .)
    GT              reduce using rule 16 (variable_type -> IDENT .)
    LTE             reduce using rule 16 (variable_type -> IDENT .)
    GTE             reduce using rule 16 (variable_type -> IDENT .)
    AND             reduce using rule 16 (variable_type -> IDENT .)
    OR              reduce using rule 16 (variable_type -> IDENT .)
    RPAREN          reduce using rule 16 (variable_type -> IDENT .)
    RBRAC           reduce using rule 16 (variable_type -> IDENT .)
    COMMA           reduce using rule 16 (variable_type -> IDENT .)


state 24

    (8) class_declaration -> CLASS IDENT LCURL . variables_declaration_list RCURL
    (11) variables_declaration_list -> . VAR variable_type variables_list SEMICOLON
    (12) variables_declaration_list -> . VAR variable_type variables_list SEMICOLON variables_declaration_list

    VAR             shift and go to state 11

    variables_declaration_list     shift and go to state 65

state 25

    (3) body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list .

    $end            reduce using rule 3 (body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list .)
    RCURL           reduce using rule 3 (body -> optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list .)


state 26

    (50) statement_list -> statement .
    (51) statement_list -> statement . statement_list
    (50) statement_list -> . statement
    (51) statement_list -> . statement statement_list
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthenelse
    (33) statement -> . statement_ifthen
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement -> . statement_expression
    (38) statement_return -> . RETURN expression SEMICOLON
    (39) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (40) statement_assignment -> . variable ASSIGN expression SEMICOLON
    (44) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (46) statement_while -> . WHILE LPAREN expression RPAREN statement
    (49) statement_compound -> . LCURL body RCURL
    (47) statement_break -> . BREAK SEMICOLON
    (48) statement_expression -> . expression SEMICOLON
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC

    $end            reduce using rule 50 (statement_list -> statement .)
    RCURL           reduce using rule 50 (statement_list -> statement .)
    RETURN          shift and go to state 36
    PRINT           shift and go to state 38
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    LCURL           shift and go to state 43
    BREAK           shift and go to state 44
    IDENT           shift and go to state 45
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    statement                      shift and go to state 26
    statement_list                 shift and go to state 66
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthenelse           shift and go to state 30
    statement_ifthen               shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34
    statement_expression           shift and go to state 35
    expression                     shift and go to state 37
    variable                       shift and go to state 40
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54

state 27

    (29) statement -> statement_return .

    RETURN          reduce using rule 29 (statement -> statement_return .)
    PRINT           reduce using rule 29 (statement -> statement_return .)
    IF              reduce using rule 29 (statement -> statement_return .)
    WHILE           reduce using rule 29 (statement -> statement_return .)
    LCURL           reduce using rule 29 (statement -> statement_return .)
    BREAK           reduce using rule 29 (statement -> statement_return .)
    IDENT           reduce using rule 29 (statement -> statement_return .)
    INT             reduce using rule 29 (statement -> statement_return .)
    BOOL            reduce using rule 29 (statement -> statement_return .)
    LPAREN          reduce using rule 29 (statement -> statement_return .)
    NOT             reduce using rule 29 (statement -> statement_return .)
    MINUS           reduce using rule 29 (statement -> statement_return .)
    NEW             reduce using rule 29 (statement -> statement_return .)
    $end            reduce using rule 29 (statement -> statement_return .)
    RCURL           reduce using rule 29 (statement -> statement_return .)
    ELSE            reduce using rule 29 (statement -> statement_return .)


state 28

    (30) statement -> statement_print .

    RETURN          reduce using rule 30 (statement -> statement_print .)
    PRINT           reduce using rule 30 (statement -> statement_print .)
    IF              reduce using rule 30 (statement -> statement_print .)
    WHILE           reduce using rule 30 (statement -> statement_print .)
    LCURL           reduce using rule 30 (statement -> statement_print .)
    BREAK           reduce using rule 30 (statement -> statement_print .)
    IDENT           reduce using rule 30 (statement -> statement_print .)
    INT             reduce using rule 30 (statement -> statement_print .)
    BOOL            reduce using rule 30 (statement -> statement_print .)
    LPAREN          reduce using rule 30 (statement -> statement_print .)
    NOT             reduce using rule 30 (statement -> statement_print .)
    MINUS           reduce using rule 30 (statement -> statement_print .)
    NEW             reduce using rule 30 (statement -> statement_print .)
    $end            reduce using rule 30 (statement -> statement_print .)
    RCURL           reduce using rule 30 (statement -> statement_print .)
    ELSE            reduce using rule 30 (statement -> statement_print .)


state 29

    (31) statement -> statement_assignment .

    RETURN          reduce using rule 31 (statement -> statement_assignment .)
    PRINT           reduce using rule 31 (statement -> statement_assignment .)
    IF              reduce using rule 31 (statement -> statement_assignment .)
    WHILE           reduce using rule 31 (statement -> statement_assignment .)
    LCURL           reduce using rule 31 (statement -> statement_assignment .)
    BREAK           reduce using rule 31 (statement -> statement_assignment .)
    IDENT           reduce using rule 31 (statement -> statement_assignment .)
    INT             reduce using rule 31 (statement -> statement_assignment .)
    BOOL            reduce using rule 31 (statement -> statement_assignment .)
    LPAREN          reduce using rule 31 (statement -> statement_assignment .)
    NOT             reduce using rule 31 (statement -> statement_assignment .)
    MINUS           reduce using rule 31 (statement -> statement_assignment .)
    NEW             reduce using rule 31 (statement -> statement_assignment .)
    $end            reduce using rule 31 (statement -> statement_assignment .)
    RCURL           reduce using rule 31 (statement -> statement_assignment .)
    ELSE            reduce using rule 31 (statement -> statement_assignment .)


state 30

    (32) statement -> statement_ifthenelse .

    RETURN          reduce using rule 32 (statement -> statement_ifthenelse .)
    PRINT           reduce using rule 32 (statement -> statement_ifthenelse .)
    IF              reduce using rule 32 (statement -> statement_ifthenelse .)
    WHILE           reduce using rule 32 (statement -> statement_ifthenelse .)
    LCURL           reduce using rule 32 (statement -> statement_ifthenelse .)
    BREAK           reduce using rule 32 (statement -> statement_ifthenelse .)
    IDENT           reduce using rule 32 (statement -> statement_ifthenelse .)
    INT             reduce using rule 32 (statement -> statement_ifthenelse .)
    BOOL            reduce using rule 32 (statement -> statement_ifthenelse .)
    LPAREN          reduce using rule 32 (statement -> statement_ifthenelse .)
    NOT             reduce using rule 32 (statement -> statement_ifthenelse .)
    MINUS           reduce using rule 32 (statement -> statement_ifthenelse .)
    NEW             reduce using rule 32 (statement -> statement_ifthenelse .)
    $end            reduce using rule 32 (statement -> statement_ifthenelse .)
    RCURL           reduce using rule 32 (statement -> statement_ifthenelse .)
    ELSE            reduce using rule 32 (statement -> statement_ifthenelse .)


state 31

    (33) statement -> statement_ifthen .

    RETURN          reduce using rule 33 (statement -> statement_ifthen .)
    PRINT           reduce using rule 33 (statement -> statement_ifthen .)
    IF              reduce using rule 33 (statement -> statement_ifthen .)
    WHILE           reduce using rule 33 (statement -> statement_ifthen .)
    LCURL           reduce using rule 33 (statement -> statement_ifthen .)
    BREAK           reduce using rule 33 (statement -> statement_ifthen .)
    IDENT           reduce using rule 33 (statement -> statement_ifthen .)
    INT             reduce using rule 33 (statement -> statement_ifthen .)
    BOOL            reduce using rule 33 (statement -> statement_ifthen .)
    LPAREN          reduce using rule 33 (statement -> statement_ifthen .)
    NOT             reduce using rule 33 (statement -> statement_ifthen .)
    MINUS           reduce using rule 33 (statement -> statement_ifthen .)
    NEW             reduce using rule 33 (statement -> statement_ifthen .)
    $end            reduce using rule 33 (statement -> statement_ifthen .)
    RCURL           reduce using rule 33 (statement -> statement_ifthen .)
    ELSE            reduce using rule 33 (statement -> statement_ifthen .)


state 32

    (34) statement -> statement_while .

    RETURN          reduce using rule 34 (statement -> statement_while .)
    PRINT           reduce using rule 34 (statement -> statement_while .)
    IF              reduce using rule 34 (statement -> statement_while .)
    WHILE           reduce using rule 34 (statement -> statement_while .)
    LCURL           reduce using rule 34 (statement -> statement_while .)
    BREAK           reduce using rule 34 (statement -> statement_while .)
    IDENT           reduce using rule 34 (statement -> statement_while .)
    INT             reduce using rule 34 (statement -> statement_while .)
    BOOL            reduce using rule 34 (statement -> statement_while .)
    LPAREN          reduce using rule 34 (statement -> statement_while .)
    NOT             reduce using rule 34 (statement -> statement_while .)
    MINUS           reduce using rule 34 (statement -> statement_while .)
    NEW             reduce using rule 34 (statement -> statement_while .)
    $end            reduce using rule 34 (statement -> statement_while .)
    RCURL           reduce using rule 34 (statement -> statement_while .)
    ELSE            reduce using rule 34 (statement -> statement_while .)


state 33

    (35) statement -> statement_compound .

    RETURN          reduce using rule 35 (statement -> statement_compound .)
    PRINT           reduce using rule 35 (statement -> statement_compound .)
    IF              reduce using rule 35 (statement -> statement_compound .)
    WHILE           reduce using rule 35 (statement -> statement_compound .)
    LCURL           reduce using rule 35 (statement -> statement_compound .)
    BREAK           reduce using rule 35 (statement -> statement_compound .)
    IDENT           reduce using rule 35 (statement -> statement_compound .)
    INT             reduce using rule 35 (statement -> statement_compound .)
    BOOL            reduce using rule 35 (statement -> statement_compound .)
    LPAREN          reduce using rule 35 (statement -> statement_compound .)
    NOT             reduce using rule 35 (statement -> statement_compound .)
    MINUS           reduce using rule 35 (statement -> statement_compound .)
    NEW             reduce using rule 35 (statement -> statement_compound .)
    $end            reduce using rule 35 (statement -> statement_compound .)
    RCURL           reduce using rule 35 (statement -> statement_compound .)
    ELSE            reduce using rule 35 (statement -> statement_compound .)


state 34

    (36) statement -> statement_break .

    RETURN          reduce using rule 36 (statement -> statement_break .)
    PRINT           reduce using rule 36 (statement -> statement_break .)
    IF              reduce using rule 36 (statement -> statement_break .)
    WHILE           reduce using rule 36 (statement -> statement_break .)
    LCURL           reduce using rule 36 (statement -> statement_break .)
    BREAK           reduce using rule 36 (statement -> statement_break .)
    IDENT           reduce using rule 36 (statement -> statement_break .)
    INT             reduce using rule 36 (statement -> statement_break .)
    BOOL            reduce using rule 36 (statement -> statement_break .)
    LPAREN          reduce using rule 36 (statement -> statement_break .)
    NOT             reduce using rule 36 (statement -> statement_break .)
    MINUS           reduce using rule 36 (statement -> statement_break .)
    NEW             reduce using rule 36 (statement -> statement_break .)
    $end            reduce using rule 36 (statement -> statement_break .)
    RCURL           reduce using rule 36 (statement -> statement_break .)
    ELSE            reduce using rule 36 (statement -> statement_break .)


state 35

    (37) statement -> statement_expression .

    RETURN          reduce using rule 37 (statement -> statement_expression .)
    PRINT           reduce using rule 37 (statement -> statement_expression .)
    IF              reduce using rule 37 (statement -> statement_expression .)
    WHILE           reduce using rule 37 (statement -> statement_expression .)
    LCURL           reduce using rule 37 (statement -> statement_expression .)
    BREAK           reduce using rule 37 (statement -> statement_expression .)
    IDENT           reduce using rule 37 (statement -> statement_expression .)
    INT             reduce using rule 37 (statement -> statement_expression .)
    BOOL            reduce using rule 37 (statement -> statement_expression .)
    LPAREN          reduce using rule 37 (statement -> statement_expression .)
    NOT             reduce using rule 37 (statement -> statement_expression .)
    MINUS           reduce using rule 37 (statement -> statement_expression .)
    NEW             reduce using rule 37 (statement -> statement_expression .)
    $end            reduce using rule 37 (statement -> statement_expression .)
    RCURL           reduce using rule 37 (statement -> statement_expression .)
    ELSE            reduce using rule 37 (statement -> statement_expression .)


state 36

    (38) statement_return -> RETURN . expression SEMICOLON
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 67
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 37

    (48) statement_expression -> expression . SEMICOLON
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression

    SEMICOLON       shift and go to state 70
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85


state 38

    (39) statement_print -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 39

    (84) expression_group -> LPAREN . expression RPAREN
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 87
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 40

    (40) statement_assignment -> variable . ASSIGN expression SEMICOLON
    (65) expression_identifier -> variable .

    ASSIGN          shift and go to state 88
    SEMICOLON       reduce using rule 65 (expression_identifier -> variable .)
    DOT             reduce using rule 65 (expression_identifier -> variable .)
    LBRAC           reduce using rule 65 (expression_identifier -> variable .)
    PLUS            reduce using rule 65 (expression_identifier -> variable .)
    MINUS           reduce using rule 65 (expression_identifier -> variable .)
    MULTIPLY        reduce using rule 65 (expression_identifier -> variable .)
    DIVIDE          reduce using rule 65 (expression_identifier -> variable .)
    MODULO          reduce using rule 65 (expression_identifier -> variable .)
    EQ              reduce using rule 65 (expression_identifier -> variable .)
    NEQ             reduce using rule 65 (expression_identifier -> variable .)
    LT              reduce using rule 65 (expression_identifier -> variable .)
    GT              reduce using rule 65 (expression_identifier -> variable .)
    LTE             reduce using rule 65 (expression_identifier -> variable .)
    GTE             reduce using rule 65 (expression_identifier -> variable .)
    AND             reduce using rule 65 (expression_identifier -> variable .)
    OR              reduce using rule 65 (expression_identifier -> variable .)


state 41

    (44) statement_ifthenelse -> IF . LPAREN expression RPAREN statement ELSE statement
    (45) statement_ifthen -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 89


state 42

    (46) statement_while -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 90


state 43

    (49) statement_compound -> LCURL . body RCURL
    (3) body -> . optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
    (4) optional_class_declaration_list -> . empty
    (5) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 7

    body                           shift and go to state 91
    optional_class_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    class_declaration_list         shift and go to state 5
    class_declaration              shift and go to state 6

state 44

    (47) statement_break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 92


state 45

    (41) variable -> IDENT .
    (66) expression_call -> IDENT . LPAREN optional_expression_list RPAREN

    ASSIGN          reduce using rule 41 (variable -> IDENT .)
    SEMICOLON       reduce using rule 41 (variable -> IDENT .)
    DOT             reduce using rule 41 (variable -> IDENT .)
    LBRAC           reduce using rule 41 (variable -> IDENT .)
    PLUS            reduce using rule 41 (variable -> IDENT .)
    MINUS           reduce using rule 41 (variable -> IDENT .)
    MULTIPLY        reduce using rule 41 (variable -> IDENT .)
    DIVIDE          reduce using rule 41 (variable -> IDENT .)
    MODULO          reduce using rule 41 (variable -> IDENT .)
    EQ              reduce using rule 41 (variable -> IDENT .)
    NEQ             reduce using rule 41 (variable -> IDENT .)
    LT              reduce using rule 41 (variable -> IDENT .)
    GT              reduce using rule 41 (variable -> IDENT .)
    LTE             reduce using rule 41 (variable -> IDENT .)
    GTE             reduce using rule 41 (variable -> IDENT .)
    AND             reduce using rule 41 (variable -> IDENT .)
    OR              reduce using rule 41 (variable -> IDENT .)
    LPAREN          shift and go to state 93


state 46

    (52) expression -> expression_integer .

    SEMICOLON       reduce using rule 52 (expression -> expression_integer .)
    DOT             reduce using rule 52 (expression -> expression_integer .)
    LBRAC           reduce using rule 52 (expression -> expression_integer .)
    PLUS            reduce using rule 52 (expression -> expression_integer .)
    MINUS           reduce using rule 52 (expression -> expression_integer .)
    MULTIPLY        reduce using rule 52 (expression -> expression_integer .)
    DIVIDE          reduce using rule 52 (expression -> expression_integer .)
    MODULO          reduce using rule 52 (expression -> expression_integer .)
    EQ              reduce using rule 52 (expression -> expression_integer .)
    NEQ             reduce using rule 52 (expression -> expression_integer .)
    LT              reduce using rule 52 (expression -> expression_integer .)
    GT              reduce using rule 52 (expression -> expression_integer .)
    LTE             reduce using rule 52 (expression -> expression_integer .)
    GTE             reduce using rule 52 (expression -> expression_integer .)
    AND             reduce using rule 52 (expression -> expression_integer .)
    OR              reduce using rule 52 (expression -> expression_integer .)
    RPAREN          reduce using rule 52 (expression -> expression_integer .)
    RBRAC           reduce using rule 52 (expression -> expression_integer .)
    COMMA           reduce using rule 52 (expression -> expression_integer .)


state 47

    (53) expression -> expression_boolean .

    SEMICOLON       reduce using rule 53 (expression -> expression_boolean .)
    DOT             reduce using rule 53 (expression -> expression_boolean .)
    LBRAC           reduce using rule 53 (expression -> expression_boolean .)
    PLUS            reduce using rule 53 (expression -> expression_boolean .)
    MINUS           reduce using rule 53 (expression -> expression_boolean .)
    MULTIPLY        reduce using rule 53 (expression -> expression_boolean .)
    DIVIDE          reduce using rule 53 (expression -> expression_boolean .)
    MODULO          reduce using rule 53 (expression -> expression_boolean .)
    EQ              reduce using rule 53 (expression -> expression_boolean .)
    NEQ             reduce using rule 53 (expression -> expression_boolean .)
    LT              reduce using rule 53 (expression -> expression_boolean .)
    GT              reduce using rule 53 (expression -> expression_boolean .)
    LTE             reduce using rule 53 (expression -> expression_boolean .)
    GTE             reduce using rule 53 (expression -> expression_boolean .)
    AND             reduce using rule 53 (expression -> expression_boolean .)
    OR              reduce using rule 53 (expression -> expression_boolean .)
    RPAREN          reduce using rule 53 (expression -> expression_boolean .)
    RBRAC           reduce using rule 53 (expression -> expression_boolean .)
    COMMA           reduce using rule 53 (expression -> expression_boolean .)


state 48

    (54) expression -> expression_identifier .

    SEMICOLON       reduce using rule 54 (expression -> expression_identifier .)
    DOT             reduce using rule 54 (expression -> expression_identifier .)
    LBRAC           reduce using rule 54 (expression -> expression_identifier .)
    PLUS            reduce using rule 54 (expression -> expression_identifier .)
    MINUS           reduce using rule 54 (expression -> expression_identifier .)
    MULTIPLY        reduce using rule 54 (expression -> expression_identifier .)
    DIVIDE          reduce using rule 54 (expression -> expression_identifier .)
    MODULO          reduce using rule 54 (expression -> expression_identifier .)
    EQ              reduce using rule 54 (expression -> expression_identifier .)
    NEQ             reduce using rule 54 (expression -> expression_identifier .)
    LT              reduce using rule 54 (expression -> expression_identifier .)
    GT              reduce using rule 54 (expression -> expression_identifier .)
    LTE             reduce using rule 54 (expression -> expression_identifier .)
    GTE             reduce using rule 54 (expression -> expression_identifier .)
    AND             reduce using rule 54 (expression -> expression_identifier .)
    OR              reduce using rule 54 (expression -> expression_identifier .)
    RPAREN          reduce using rule 54 (expression -> expression_identifier .)
    RBRAC           reduce using rule 54 (expression -> expression_identifier .)
    COMMA           reduce using rule 54 (expression -> expression_identifier .)


state 49

    (55) expression -> expression_call .

    SEMICOLON       reduce using rule 55 (expression -> expression_call .)
    DOT             reduce using rule 55 (expression -> expression_call .)
    LBRAC           reduce using rule 55 (expression -> expression_call .)
    PLUS            reduce using rule 55 (expression -> expression_call .)
    MINUS           reduce using rule 55 (expression -> expression_call .)
    MULTIPLY        reduce using rule 55 (expression -> expression_call .)
    DIVIDE          reduce using rule 55 (expression -> expression_call .)
    MODULO          reduce using rule 55 (expression -> expression_call .)
    EQ              reduce using rule 55 (expression -> expression_call .)
    NEQ             reduce using rule 55 (expression -> expression_call .)
    LT              reduce using rule 55 (expression -> expression_call .)
    GT              reduce using rule 55 (expression -> expression_call .)
    LTE             reduce using rule 55 (expression -> expression_call .)
    GTE             reduce using rule 55 (expression -> expression_call .)
    AND             reduce using rule 55 (expression -> expression_call .)
    OR              reduce using rule 55 (expression -> expression_call .)
    RPAREN          reduce using rule 55 (expression -> expression_call .)
    RBRAC           reduce using rule 55 (expression -> expression_call .)
    COMMA           reduce using rule 55 (expression -> expression_call .)


state 50

    (56) expression -> expression_binop .

    SEMICOLON       reduce using rule 56 (expression -> expression_binop .)
    DOT             reduce using rule 56 (expression -> expression_binop .)
    LBRAC           reduce using rule 56 (expression -> expression_binop .)
    PLUS            reduce using rule 56 (expression -> expression_binop .)
    MINUS           reduce using rule 56 (expression -> expression_binop .)
    MULTIPLY        reduce using rule 56 (expression -> expression_binop .)
    DIVIDE          reduce using rule 56 (expression -> expression_binop .)
    MODULO          reduce using rule 56 (expression -> expression_binop .)
    EQ              reduce using rule 56 (expression -> expression_binop .)
    NEQ             reduce using rule 56 (expression -> expression_binop .)
    LT              reduce using rule 56 (expression -> expression_binop .)
    GT              reduce using rule 56 (expression -> expression_binop .)
    LTE             reduce using rule 56 (expression -> expression_binop .)
    GTE             reduce using rule 56 (expression -> expression_binop .)
    AND             reduce using rule 56 (expression -> expression_binop .)
    OR              reduce using rule 56 (expression -> expression_binop .)
    RPAREN          reduce using rule 56 (expression -> expression_binop .)
    RBRAC           reduce using rule 56 (expression -> expression_binop .)
    COMMA           reduce using rule 56 (expression -> expression_binop .)


state 51

    (57) expression -> expression_group .

    SEMICOLON       reduce using rule 57 (expression -> expression_group .)
    DOT             reduce using rule 57 (expression -> expression_group .)
    LBRAC           reduce using rule 57 (expression -> expression_group .)
    PLUS            reduce using rule 57 (expression -> expression_group .)
    MINUS           reduce using rule 57 (expression -> expression_group .)
    MULTIPLY        reduce using rule 57 (expression -> expression_group .)
    DIVIDE          reduce using rule 57 (expression -> expression_group .)
    MODULO          reduce using rule 57 (expression -> expression_group .)
    EQ              reduce using rule 57 (expression -> expression_group .)
    NEQ             reduce using rule 57 (expression -> expression_group .)
    LT              reduce using rule 57 (expression -> expression_group .)
    GT              reduce using rule 57 (expression -> expression_group .)
    LTE             reduce using rule 57 (expression -> expression_group .)
    GTE             reduce using rule 57 (expression -> expression_group .)
    AND             reduce using rule 57 (expression -> expression_group .)
    OR              reduce using rule 57 (expression -> expression_group .)
    RPAREN          reduce using rule 57 (expression -> expression_group .)
    RBRAC           reduce using rule 57 (expression -> expression_group .)
    COMMA           reduce using rule 57 (expression -> expression_group .)


state 52

    (58) expression -> expression_neg .

    SEMICOLON       reduce using rule 58 (expression -> expression_neg .)
    DOT             reduce using rule 58 (expression -> expression_neg .)
    LBRAC           reduce using rule 58 (expression -> expression_neg .)
    PLUS            reduce using rule 58 (expression -> expression_neg .)
    MINUS           reduce using rule 58 (expression -> expression_neg .)
    MULTIPLY        reduce using rule 58 (expression -> expression_neg .)
    DIVIDE          reduce using rule 58 (expression -> expression_neg .)
    MODULO          reduce using rule 58 (expression -> expression_neg .)
    EQ              reduce using rule 58 (expression -> expression_neg .)
    NEQ             reduce using rule 58 (expression -> expression_neg .)
    LT              reduce using rule 58 (expression -> expression_neg .)
    GT              reduce using rule 58 (expression -> expression_neg .)
    LTE             reduce using rule 58 (expression -> expression_neg .)
    GTE             reduce using rule 58 (expression -> expression_neg .)
    AND             reduce using rule 58 (expression -> expression_neg .)
    OR              reduce using rule 58 (expression -> expression_neg .)
    RPAREN          reduce using rule 58 (expression -> expression_neg .)
    RBRAC           reduce using rule 58 (expression -> expression_neg .)
    COMMA           reduce using rule 58 (expression -> expression_neg .)


state 53

    (59) expression -> expression_negative .

    SEMICOLON       reduce using rule 59 (expression -> expression_negative .)
    DOT             reduce using rule 59 (expression -> expression_negative .)
    LBRAC           reduce using rule 59 (expression -> expression_negative .)
    PLUS            reduce using rule 59 (expression -> expression_negative .)
    MINUS           reduce using rule 59 (expression -> expression_negative .)
    MULTIPLY        reduce using rule 59 (expression -> expression_negative .)
    DIVIDE          reduce using rule 59 (expression -> expression_negative .)
    MODULO          reduce using rule 59 (expression -> expression_negative .)
    EQ              reduce using rule 59 (expression -> expression_negative .)
    NEQ             reduce using rule 59 (expression -> expression_negative .)
    LT              reduce using rule 59 (expression -> expression_negative .)
    GT              reduce using rule 59 (expression -> expression_negative .)
    LTE             reduce using rule 59 (expression -> expression_negative .)
    GTE             reduce using rule 59 (expression -> expression_negative .)
    AND             reduce using rule 59 (expression -> expression_negative .)
    OR              reduce using rule 59 (expression -> expression_negative .)
    RPAREN          reduce using rule 59 (expression -> expression_negative .)
    RBRAC           reduce using rule 59 (expression -> expression_negative .)
    COMMA           reduce using rule 59 (expression -> expression_negative .)


state 54

    (60) expression -> expression_new .

    SEMICOLON       reduce using rule 60 (expression -> expression_new .)
    DOT             reduce using rule 60 (expression -> expression_new .)
    LBRAC           reduce using rule 60 (expression -> expression_new .)
    PLUS            reduce using rule 60 (expression -> expression_new .)
    MINUS           reduce using rule 60 (expression -> expression_new .)
    MULTIPLY        reduce using rule 60 (expression -> expression_new .)
    DIVIDE          reduce using rule 60 (expression -> expression_new .)
    MODULO          reduce using rule 60 (expression -> expression_new .)
    EQ              reduce using rule 60 (expression -> expression_new .)
    NEQ             reduce using rule 60 (expression -> expression_new .)
    LT              reduce using rule 60 (expression -> expression_new .)
    GT              reduce using rule 60 (expression -> expression_new .)
    LTE             reduce using rule 60 (expression -> expression_new .)
    GTE             reduce using rule 60 (expression -> expression_new .)
    AND             reduce using rule 60 (expression -> expression_new .)
    OR              reduce using rule 60 (expression -> expression_new .)
    RPAREN          reduce using rule 60 (expression -> expression_new .)
    RBRAC           reduce using rule 60 (expression -> expression_new .)
    COMMA           reduce using rule 60 (expression -> expression_new .)


state 55

    (61) expression_integer -> INT .

    SEMICOLON       reduce using rule 61 (expression_integer -> INT .)
    DOT             reduce using rule 61 (expression_integer -> INT .)
    LBRAC           reduce using rule 61 (expression_integer -> INT .)
    PLUS            reduce using rule 61 (expression_integer -> INT .)
    MINUS           reduce using rule 61 (expression_integer -> INT .)
    MULTIPLY        reduce using rule 61 (expression_integer -> INT .)
    DIVIDE          reduce using rule 61 (expression_integer -> INT .)
    MODULO          reduce using rule 61 (expression_integer -> INT .)
    EQ              reduce using rule 61 (expression_integer -> INT .)
    NEQ             reduce using rule 61 (expression_integer -> INT .)
    LT              reduce using rule 61 (expression_integer -> INT .)
    GT              reduce using rule 61 (expression_integer -> INT .)
    LTE             reduce using rule 61 (expression_integer -> INT .)
    GTE             reduce using rule 61 (expression_integer -> INT .)
    AND             reduce using rule 61 (expression_integer -> INT .)
    OR              reduce using rule 61 (expression_integer -> INT .)
    RPAREN          reduce using rule 61 (expression_integer -> INT .)
    RBRAC           reduce using rule 61 (expression_integer -> INT .)
    COMMA           reduce using rule 61 (expression_integer -> INT .)


state 56

    (62) expression_boolean -> BOOL .

    SEMICOLON       reduce using rule 62 (expression_boolean -> BOOL .)
    DOT             reduce using rule 62 (expression_boolean -> BOOL .)
    LBRAC           reduce using rule 62 (expression_boolean -> BOOL .)
    PLUS            reduce using rule 62 (expression_boolean -> BOOL .)
    MINUS           reduce using rule 62 (expression_boolean -> BOOL .)
    MULTIPLY        reduce using rule 62 (expression_boolean -> BOOL .)
    DIVIDE          reduce using rule 62 (expression_boolean -> BOOL .)
    MODULO          reduce using rule 62 (expression_boolean -> BOOL .)
    EQ              reduce using rule 62 (expression_boolean -> BOOL .)
    NEQ             reduce using rule 62 (expression_boolean -> BOOL .)
    LT              reduce using rule 62 (expression_boolean -> BOOL .)
    GT              reduce using rule 62 (expression_boolean -> BOOL .)
    LTE             reduce using rule 62 (expression_boolean -> BOOL .)
    GTE             reduce using rule 62 (expression_boolean -> BOOL .)
    AND             reduce using rule 62 (expression_boolean -> BOOL .)
    OR              reduce using rule 62 (expression_boolean -> BOOL .)
    RPAREN          reduce using rule 62 (expression_boolean -> BOOL .)
    RBRAC           reduce using rule 62 (expression_boolean -> BOOL .)
    COMMA           reduce using rule 62 (expression_boolean -> BOOL .)


state 57

    (64) expression_negative -> MINUS . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 94
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 58

    (63) expression_neg -> NOT . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 95
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 59

    (85) expression_new -> NEW . variable_type
    (86) expression_new -> NEW . variable_type LBRAC expression RBRAC
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 96

state 60

    (23) functions_declaration_list -> function functions_declaration_list .

    RETURN          reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    PRINT           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    IF              reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    WHILE           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    LCURL           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    BREAK           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    IDENT           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    INT             reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    BOOL            reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    LPAREN          reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    NOT             reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    MINUS           reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)
    NEW             reduce using rule 23 (functions_declaration_list -> function functions_declaration_list .)


state 61

    (24) function -> FUNCTION variable_type . IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
    (17) variable_type -> variable_type . LBRAC RBRAC

    IDENT           shift and go to state 97
    LBRAC           shift and go to state 63


state 62

    (11) variables_declaration_list -> VAR variable_type variables_list . SEMICOLON
    (12) variables_declaration_list -> VAR variable_type variables_list . SEMICOLON variables_declaration_list

    SEMICOLON       shift and go to state 98


state 63

    (17) variable_type -> variable_type LBRAC . RBRAC

    RBRAC           shift and go to state 99


state 64

    (18) variables_list -> IDENT .
    (19) variables_list -> IDENT . COMMA variables_list

    SEMICOLON       reduce using rule 18 (variables_list -> IDENT .)
    COMMA           shift and go to state 100


state 65

    (8) class_declaration -> CLASS IDENT LCURL variables_declaration_list . RCURL

    RCURL           shift and go to state 101


state 66

    (51) statement_list -> statement statement_list .

    $end            reduce using rule 51 (statement_list -> statement statement_list .)
    RCURL           reduce using rule 51 (statement_list -> statement statement_list .)


state 67

    (38) statement_return -> RETURN expression . SEMICOLON
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       shift and go to state 102
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 68

    (65) expression_identifier -> variable .

    SEMICOLON       reduce using rule 65 (expression_identifier -> variable .)
    PLUS            reduce using rule 65 (expression_identifier -> variable .)
    MINUS           reduce using rule 65 (expression_identifier -> variable .)
    MULTIPLY        reduce using rule 65 (expression_identifier -> variable .)
    DIVIDE          reduce using rule 65 (expression_identifier -> variable .)
    MODULO          reduce using rule 65 (expression_identifier -> variable .)
    EQ              reduce using rule 65 (expression_identifier -> variable .)
    NEQ             reduce using rule 65 (expression_identifier -> variable .)
    LT              reduce using rule 65 (expression_identifier -> variable .)
    GT              reduce using rule 65 (expression_identifier -> variable .)
    LTE             reduce using rule 65 (expression_identifier -> variable .)
    GTE             reduce using rule 65 (expression_identifier -> variable .)
    AND             reduce using rule 65 (expression_identifier -> variable .)
    OR              reduce using rule 65 (expression_identifier -> variable .)
    DOT             reduce using rule 65 (expression_identifier -> variable .)
    LBRAC           reduce using rule 65 (expression_identifier -> variable .)
    RPAREN          reduce using rule 65 (expression_identifier -> variable .)
    RBRAC           reduce using rule 65 (expression_identifier -> variable .)
    COMMA           reduce using rule 65 (expression_identifier -> variable .)


state 69

    (66) expression_call -> IDENT . LPAREN optional_expression_list RPAREN
    (41) variable -> IDENT .

    LPAREN          shift and go to state 93
    SEMICOLON       reduce using rule 41 (variable -> IDENT .)
    PLUS            reduce using rule 41 (variable -> IDENT .)
    MINUS           reduce using rule 41 (variable -> IDENT .)
    MULTIPLY        reduce using rule 41 (variable -> IDENT .)
    DIVIDE          reduce using rule 41 (variable -> IDENT .)
    MODULO          reduce using rule 41 (variable -> IDENT .)
    EQ              reduce using rule 41 (variable -> IDENT .)
    NEQ             reduce using rule 41 (variable -> IDENT .)
    LT              reduce using rule 41 (variable -> IDENT .)
    GT              reduce using rule 41 (variable -> IDENT .)
    LTE             reduce using rule 41 (variable -> IDENT .)
    GTE             reduce using rule 41 (variable -> IDENT .)
    AND             reduce using rule 41 (variable -> IDENT .)
    OR              reduce using rule 41 (variable -> IDENT .)
    DOT             reduce using rule 41 (variable -> IDENT .)
    LBRAC           reduce using rule 41 (variable -> IDENT .)
    RPAREN          reduce using rule 41 (variable -> IDENT .)
    RBRAC           reduce using rule 41 (variable -> IDENT .)
    COMMA           reduce using rule 41 (variable -> IDENT .)


state 70

    (48) statement_expression -> expression SEMICOLON .

    RETURN          reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    PRINT           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    IF              reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    WHILE           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    LCURL           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    BREAK           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    IDENT           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    INT             reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    BOOL            reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    LPAREN          reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    NOT             reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    MINUS           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    NEW             reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    $end            reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    RCURL           reduce using rule 48 (statement_expression -> expression SEMICOLON .)
    ELSE            reduce using rule 48 (statement_expression -> expression SEMICOLON .)


state 71

    (42) variable -> expression DOT . IDENT

    IDENT           shift and go to state 103


state 72

    (43) variable -> expression LBRAC . expression RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 104
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 73

    (71) expression_binop -> expression PLUS . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 105
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 74

    (72) expression_binop -> expression MINUS . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 106
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 75

    (73) expression_binop -> expression MULTIPLY . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 107
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 76

    (74) expression_binop -> expression DIVIDE . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 108
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 77

    (75) expression_binop -> expression MODULO . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 109
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 78

    (76) expression_binop -> expression EQ . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 110
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 79

    (77) expression_binop -> expression NEQ . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 111
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 80

    (78) expression_binop -> expression LT . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 112
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 81

    (79) expression_binop -> expression GT . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 113
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 82

    (80) expression_binop -> expression LTE . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 114
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 83

    (81) expression_binop -> expression GTE . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 115
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 84

    (82) expression_binop -> expression AND . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 116
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 85

    (83) expression_binop -> expression OR . expression
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 117
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 86

    (39) statement_print -> PRINT LPAREN . expression RPAREN SEMICOLON
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 118
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 87

    (84) expression_group -> LPAREN expression . RPAREN
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RPAREN          shift and go to state 119
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 88

    (40) statement_assignment -> variable ASSIGN . expression SEMICOLON
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    variable                       shift and go to state 68
    expression                     shift and go to state 120
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54

state 89

    (44) statement_ifthenelse -> IF LPAREN . expression RPAREN statement ELSE statement
    (45) statement_ifthen -> IF LPAREN . expression RPAREN statement
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 121
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 90

    (46) statement_while -> WHILE LPAREN . expression RPAREN statement
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 122
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 91

    (49) statement_compound -> LCURL body . RCURL

    RCURL           shift and go to state 123


state 92

    (47) statement_break -> BREAK SEMICOLON .

    RETURN          reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    PRINT           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    IF              reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    LCURL           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    IDENT           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    INT             reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    BOOL            reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    NOT             reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    MINUS           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    NEW             reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    $end            reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    RCURL           reduce using rule 47 (statement_break -> BREAK SEMICOLON .)
    ELSE            reduce using rule 47 (statement_break -> BREAK SEMICOLON .)


state 93

    (66) expression_call -> IDENT LPAREN . optional_expression_list RPAREN
    (67) optional_expression_list -> . empty
    (68) optional_expression_list -> . expression_list
    (2) empty -> .
    (69) expression_list -> . expression
    (70) expression_list -> . expression COMMA expression_list
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    RPAREN          reduce using rule 2 (empty -> .)
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    optional_expression_list       shift and go to state 124
    empty                          shift and go to state 125
    expression_list                shift and go to state 126
    expression                     shift and go to state 127
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 94

    (64) expression_negative -> MINUS expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 64 (expression_negative -> MINUS expression .)
    PLUS            reduce using rule 64 (expression_negative -> MINUS expression .)
    MINUS           reduce using rule 64 (expression_negative -> MINUS expression .)
    MODULO          reduce using rule 64 (expression_negative -> MINUS expression .)
    EQ              reduce using rule 64 (expression_negative -> MINUS expression .)
    NEQ             reduce using rule 64 (expression_negative -> MINUS expression .)
    LT              reduce using rule 64 (expression_negative -> MINUS expression .)
    GT              reduce using rule 64 (expression_negative -> MINUS expression .)
    LTE             reduce using rule 64 (expression_negative -> MINUS expression .)
    GTE             reduce using rule 64 (expression_negative -> MINUS expression .)
    AND             reduce using rule 64 (expression_negative -> MINUS expression .)
    OR              reduce using rule 64 (expression_negative -> MINUS expression .)
    RPAREN          reduce using rule 64 (expression_negative -> MINUS expression .)
    RBRAC           reduce using rule 64 (expression_negative -> MINUS expression .)
    COMMA           reduce using rule 64 (expression_negative -> MINUS expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 64 (expression_negative -> MINUS expression .) ]
  ! LBRAC           [ reduce using rule 64 (expression_negative -> MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression_negative -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression_negative -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LTE             [ shift and go to state 82 ]
  ! GTE             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 95

    (63) expression_neg -> NOT expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 63 (expression_neg -> NOT expression .)
    AND             reduce using rule 63 (expression_neg -> NOT expression .)
    OR              reduce using rule 63 (expression_neg -> NOT expression .)
    RPAREN          reduce using rule 63 (expression_neg -> NOT expression .)
    RBRAC           reduce using rule 63 (expression_neg -> NOT expression .)
    COMMA           reduce using rule 63 (expression_neg -> NOT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! LBRAC           [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! PLUS            [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! MINUS           [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! MODULO          [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! EQ              [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! NEQ             [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! LT              [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! GT              [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! LTE             [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! GTE             [ reduce using rule 63 (expression_neg -> NOT expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 96

    (85) expression_new -> NEW variable_type .
    (86) expression_new -> NEW variable_type . LBRAC expression RBRAC
    (17) variable_type -> variable_type . LBRAC RBRAC

    SEMICOLON       reduce using rule 85 (expression_new -> NEW variable_type .)
    DOT             reduce using rule 85 (expression_new -> NEW variable_type .)
    PLUS            reduce using rule 85 (expression_new -> NEW variable_type .)
    MINUS           reduce using rule 85 (expression_new -> NEW variable_type .)
    MULTIPLY        reduce using rule 85 (expression_new -> NEW variable_type .)
    DIVIDE          reduce using rule 85 (expression_new -> NEW variable_type .)
    MODULO          reduce using rule 85 (expression_new -> NEW variable_type .)
    EQ              reduce using rule 85 (expression_new -> NEW variable_type .)
    NEQ             reduce using rule 85 (expression_new -> NEW variable_type .)
    LT              reduce using rule 85 (expression_new -> NEW variable_type .)
    GT              reduce using rule 85 (expression_new -> NEW variable_type .)
    LTE             reduce using rule 85 (expression_new -> NEW variable_type .)
    GTE             reduce using rule 85 (expression_new -> NEW variable_type .)
    AND             reduce using rule 85 (expression_new -> NEW variable_type .)
    OR              reduce using rule 85 (expression_new -> NEW variable_type .)
    RPAREN          reduce using rule 85 (expression_new -> NEW variable_type .)
    RBRAC           reduce using rule 85 (expression_new -> NEW variable_type .)
    COMMA           reduce using rule 85 (expression_new -> NEW variable_type .)
    LBRAC           shift and go to state 128

  ! LBRAC           [ reduce using rule 85 (expression_new -> NEW variable_type .) ]


state 97

    (24) function -> FUNCTION variable_type IDENT . LPAREN optional_parameter_list RPAREN LCURL body RCURL

    LPAREN          shift and go to state 129


state 98

    (11) variables_declaration_list -> VAR variable_type variables_list SEMICOLON .
    (12) variables_declaration_list -> VAR variable_type variables_list SEMICOLON . variables_declaration_list
    (11) variables_declaration_list -> . VAR variable_type variables_list SEMICOLON
    (12) variables_declaration_list -> . VAR variable_type variables_list SEMICOLON variables_declaration_list

    FUNCTION        reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    RETURN          reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    PRINT           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    IF              reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    WHILE           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    LCURL           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    BREAK           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    IDENT           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    INT             reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    BOOL            reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    LPAREN          reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    NOT             reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    MINUS           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    NEW             reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    RCURL           reduce using rule 11 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON .)
    VAR             shift and go to state 11

    variables_declaration_list     shift and go to state 130

state 99

    (17) variable_type -> variable_type LBRAC RBRAC .

    LBRAC           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    IDENT           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    SEMICOLON       reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    DOT             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    PLUS            reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    MINUS           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    MULTIPLY        reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    DIVIDE          reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    MODULO          reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    EQ              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    NEQ             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    LT              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    GT              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    LTE             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    GTE             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    AND             reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    OR              reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    RPAREN          reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    RBRAC           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)
    COMMA           reduce using rule 17 (variable_type -> variable_type LBRAC RBRAC .)


state 100

    (19) variables_list -> IDENT COMMA . variables_list
    (18) variables_list -> . IDENT
    (19) variables_list -> . IDENT COMMA variables_list

    IDENT           shift and go to state 64

    variables_list                 shift and go to state 131

state 101

    (8) class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .

    CLASS           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    VAR             reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    FUNCTION        reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    RETURN          reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    PRINT           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    IF              reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    WHILE           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    LCURL           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    BREAK           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    IDENT           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    INT             reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    BOOL            reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    LPAREN          reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    NOT             reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    MINUS           reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)
    NEW             reduce using rule 8 (class_declaration -> CLASS IDENT LCURL variables_declaration_list RCURL .)


state 102

    (38) statement_return -> RETURN expression SEMICOLON .

    RETURN          reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    LCURL           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    IDENT           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    INT             reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    BOOL            reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    NEW             reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    $end            reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    RCURL           reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 38 (statement_return -> RETURN expression SEMICOLON .)


state 103

    (42) variable -> expression DOT IDENT .

    ASSIGN          reduce using rule 42 (variable -> expression DOT IDENT .)
    SEMICOLON       reduce using rule 42 (variable -> expression DOT IDENT .)
    DOT             reduce using rule 42 (variable -> expression DOT IDENT .)
    LBRAC           reduce using rule 42 (variable -> expression DOT IDENT .)
    PLUS            reduce using rule 42 (variable -> expression DOT IDENT .)
    MINUS           reduce using rule 42 (variable -> expression DOT IDENT .)
    MULTIPLY        reduce using rule 42 (variable -> expression DOT IDENT .)
    DIVIDE          reduce using rule 42 (variable -> expression DOT IDENT .)
    MODULO          reduce using rule 42 (variable -> expression DOT IDENT .)
    EQ              reduce using rule 42 (variable -> expression DOT IDENT .)
    NEQ             reduce using rule 42 (variable -> expression DOT IDENT .)
    LT              reduce using rule 42 (variable -> expression DOT IDENT .)
    GT              reduce using rule 42 (variable -> expression DOT IDENT .)
    LTE             reduce using rule 42 (variable -> expression DOT IDENT .)
    GTE             reduce using rule 42 (variable -> expression DOT IDENT .)
    AND             reduce using rule 42 (variable -> expression DOT IDENT .)
    OR              reduce using rule 42 (variable -> expression DOT IDENT .)
    RPAREN          reduce using rule 42 (variable -> expression DOT IDENT .)
    RBRAC           reduce using rule 42 (variable -> expression DOT IDENT .)
    COMMA           reduce using rule 42 (variable -> expression DOT IDENT .)


state 104

    (43) variable -> expression LBRAC expression . RBRAC
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RBRAC           shift and go to state 132
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 105

    (71) expression_binop -> expression PLUS expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 71 (expression_binop -> expression PLUS expression .)
    PLUS            reduce using rule 71 (expression_binop -> expression PLUS expression .)
    MINUS           reduce using rule 71 (expression_binop -> expression PLUS expression .)
    MODULO          reduce using rule 71 (expression_binop -> expression PLUS expression .)
    EQ              reduce using rule 71 (expression_binop -> expression PLUS expression .)
    NEQ             reduce using rule 71 (expression_binop -> expression PLUS expression .)
    LT              reduce using rule 71 (expression_binop -> expression PLUS expression .)
    GT              reduce using rule 71 (expression_binop -> expression PLUS expression .)
    LTE             reduce using rule 71 (expression_binop -> expression PLUS expression .)
    GTE             reduce using rule 71 (expression_binop -> expression PLUS expression .)
    AND             reduce using rule 71 (expression_binop -> expression PLUS expression .)
    OR              reduce using rule 71 (expression_binop -> expression PLUS expression .)
    RPAREN          reduce using rule 71 (expression_binop -> expression PLUS expression .)
    RBRAC           reduce using rule 71 (expression_binop -> expression PLUS expression .)
    COMMA           reduce using rule 71 (expression_binop -> expression PLUS expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 71 (expression_binop -> expression PLUS expression .) ]
  ! LBRAC           [ reduce using rule 71 (expression_binop -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression_binop -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression_binop -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LTE             [ shift and go to state 82 ]
  ! GTE             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 106

    (72) expression_binop -> expression MINUS expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 72 (expression_binop -> expression MINUS expression .)
    PLUS            reduce using rule 72 (expression_binop -> expression MINUS expression .)
    MINUS           reduce using rule 72 (expression_binop -> expression MINUS expression .)
    MODULO          reduce using rule 72 (expression_binop -> expression MINUS expression .)
    EQ              reduce using rule 72 (expression_binop -> expression MINUS expression .)
    NEQ             reduce using rule 72 (expression_binop -> expression MINUS expression .)
    LT              reduce using rule 72 (expression_binop -> expression MINUS expression .)
    GT              reduce using rule 72 (expression_binop -> expression MINUS expression .)
    LTE             reduce using rule 72 (expression_binop -> expression MINUS expression .)
    GTE             reduce using rule 72 (expression_binop -> expression MINUS expression .)
    AND             reduce using rule 72 (expression_binop -> expression MINUS expression .)
    OR              reduce using rule 72 (expression_binop -> expression MINUS expression .)
    RPAREN          reduce using rule 72 (expression_binop -> expression MINUS expression .)
    RBRAC           reduce using rule 72 (expression_binop -> expression MINUS expression .)
    COMMA           reduce using rule 72 (expression_binop -> expression MINUS expression .)
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 72 (expression_binop -> expression MINUS expression .) ]
  ! LBRAC           [ reduce using rule 72 (expression_binop -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression_binop -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression_binop -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MODULO          [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LTE             [ shift and go to state 82 ]
  ! GTE             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 107

    (73) expression_binop -> expression MULTIPLY expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    PLUS            reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    MINUS           reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    MODULO          reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    EQ              reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    NEQ             reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    LT              reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    GT              reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    LTE             reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    GTE             reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    AND             reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    OR              reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    RBRAC           reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    COMMA           reduce using rule 73 (expression_binop -> expression MULTIPLY expression .)
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 73 (expression_binop -> expression MULTIPLY expression .) ]
  ! LBRAC           [ reduce using rule 73 (expression_binop -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MODULO          [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LTE             [ shift and go to state 82 ]
  ! GTE             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 108

    (74) expression_binop -> expression DIVIDE expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    PLUS            reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    MINUS           reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    MODULO          reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    EQ              reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    NEQ             reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    LT              reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    GT              reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    LTE             reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    GTE             reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    AND             reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    OR              reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    RPAREN          reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    RBRAC           reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    COMMA           reduce using rule 74 (expression_binop -> expression DIVIDE expression .)
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 74 (expression_binop -> expression DIVIDE expression .) ]
  ! LBRAC           [ reduce using rule 74 (expression_binop -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! MULTIPLY        [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 76 ]
  ! MODULO          [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LTE             [ shift and go to state 82 ]
  ! GTE             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 109

    (75) expression_binop -> expression MODULO expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 75 (expression_binop -> expression MODULO expression .)
    MODULO          reduce using rule 75 (expression_binop -> expression MODULO expression .)
    EQ              reduce using rule 75 (expression_binop -> expression MODULO expression .)
    NEQ             reduce using rule 75 (expression_binop -> expression MODULO expression .)
    LT              reduce using rule 75 (expression_binop -> expression MODULO expression .)
    GT              reduce using rule 75 (expression_binop -> expression MODULO expression .)
    LTE             reduce using rule 75 (expression_binop -> expression MODULO expression .)
    GTE             reduce using rule 75 (expression_binop -> expression MODULO expression .)
    AND             reduce using rule 75 (expression_binop -> expression MODULO expression .)
    OR              reduce using rule 75 (expression_binop -> expression MODULO expression .)
    RPAREN          reduce using rule 75 (expression_binop -> expression MODULO expression .)
    RBRAC           reduce using rule 75 (expression_binop -> expression MODULO expression .)
    COMMA           reduce using rule 75 (expression_binop -> expression MODULO expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 75 (expression_binop -> expression MODULO expression .) ]
  ! LBRAC           [ reduce using rule 75 (expression_binop -> expression MODULO expression .) ]
  ! PLUS            [ reduce using rule 75 (expression_binop -> expression MODULO expression .) ]
  ! MINUS           [ reduce using rule 75 (expression_binop -> expression MODULO expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression_binop -> expression MODULO expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression_binop -> expression MODULO expression .) ]
  ! MODULO          [ shift and go to state 77 ]
  ! EQ              [ shift and go to state 78 ]
  ! NEQ             [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! LTE             [ shift and go to state 82 ]
  ! GTE             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 110

    (76) expression_binop -> expression EQ expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 76 (expression_binop -> expression EQ expression .)
    AND             reduce using rule 76 (expression_binop -> expression EQ expression .)
    OR              reduce using rule 76 (expression_binop -> expression EQ expression .)
    RPAREN          reduce using rule 76 (expression_binop -> expression EQ expression .)
    RBRAC           reduce using rule 76 (expression_binop -> expression EQ expression .)
    COMMA           reduce using rule 76 (expression_binop -> expression EQ expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! LBRAC           [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! MODULO          [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! LT              [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! GT              [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 76 (expression_binop -> expression EQ expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 111

    (77) expression_binop -> expression NEQ expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 77 (expression_binop -> expression NEQ expression .)
    AND             reduce using rule 77 (expression_binop -> expression NEQ expression .)
    OR              reduce using rule 77 (expression_binop -> expression NEQ expression .)
    RPAREN          reduce using rule 77 (expression_binop -> expression NEQ expression .)
    RBRAC           reduce using rule 77 (expression_binop -> expression NEQ expression .)
    COMMA           reduce using rule 77 (expression_binop -> expression NEQ expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! LBRAC           [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! PLUS            [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! MODULO          [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 77 (expression_binop -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 112

    (78) expression_binop -> expression LT expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 78 (expression_binop -> expression LT expression .)
    AND             reduce using rule 78 (expression_binop -> expression LT expression .)
    OR              reduce using rule 78 (expression_binop -> expression LT expression .)
    RPAREN          reduce using rule 78 (expression_binop -> expression LT expression .)
    RBRAC           reduce using rule 78 (expression_binop -> expression LT expression .)
    COMMA           reduce using rule 78 (expression_binop -> expression LT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! LBRAC           [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! MULTIPLY        [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! EQ              [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! LT              [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! GT              [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! LTE             [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! GTE             [ reduce using rule 78 (expression_binop -> expression LT expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 113

    (79) expression_binop -> expression GT expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 79 (expression_binop -> expression GT expression .)
    AND             reduce using rule 79 (expression_binop -> expression GT expression .)
    OR              reduce using rule 79 (expression_binop -> expression GT expression .)
    RPAREN          reduce using rule 79 (expression_binop -> expression GT expression .)
    RBRAC           reduce using rule 79 (expression_binop -> expression GT expression .)
    COMMA           reduce using rule 79 (expression_binop -> expression GT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! LBRAC           [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! MULTIPLY        [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! EQ              [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! LT              [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! GT              [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! LTE             [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! GTE             [ reduce using rule 79 (expression_binop -> expression GT expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 114

    (80) expression_binop -> expression LTE expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 80 (expression_binop -> expression LTE expression .)
    AND             reduce using rule 80 (expression_binop -> expression LTE expression .)
    OR              reduce using rule 80 (expression_binop -> expression LTE expression .)
    RPAREN          reduce using rule 80 (expression_binop -> expression LTE expression .)
    RBRAC           reduce using rule 80 (expression_binop -> expression LTE expression .)
    COMMA           reduce using rule 80 (expression_binop -> expression LTE expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! LBRAC           [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! PLUS            [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! MULTIPLY        [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! MODULO          [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! LT              [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! GT              [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 80 (expression_binop -> expression LTE expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 115

    (81) expression_binop -> expression GTE expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 81 (expression_binop -> expression GTE expression .)
    AND             reduce using rule 81 (expression_binop -> expression GTE expression .)
    OR              reduce using rule 81 (expression_binop -> expression GTE expression .)
    RPAREN          reduce using rule 81 (expression_binop -> expression GTE expression .)
    RBRAC           reduce using rule 81 (expression_binop -> expression GTE expression .)
    COMMA           reduce using rule 81 (expression_binop -> expression GTE expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! LBRAC           [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! PLUS            [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! MULTIPLY        [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! MODULO          [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! LT              [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! GT              [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 81 (expression_binop -> expression GTE expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 116

    (82) expression_binop -> expression AND expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 82 (expression_binop -> expression AND expression .)
    AND             reduce using rule 82 (expression_binop -> expression AND expression .)
    RPAREN          reduce using rule 82 (expression_binop -> expression AND expression .)
    RBRAC           reduce using rule 82 (expression_binop -> expression AND expression .)
    COMMA           reduce using rule 82 (expression_binop -> expression AND expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! LBRAC           [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! EQ              [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! LT              [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! GT              [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! LTE             [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! GTE             [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! OR              [ reduce using rule 82 (expression_binop -> expression AND expression .) ]
  ! AND             [ shift and go to state 84 ]


state 117

    (83) expression_binop -> expression OR expression .
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       reduce using rule 83 (expression_binop -> expression OR expression .)
    AND             reduce using rule 83 (expression_binop -> expression OR expression .)
    OR              reduce using rule 83 (expression_binop -> expression OR expression .)
    RPAREN          reduce using rule 83 (expression_binop -> expression OR expression .)
    RBRAC           reduce using rule 83 (expression_binop -> expression OR expression .)
    COMMA           reduce using rule 83 (expression_binop -> expression OR expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72

  ! DOT             [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! LBRAC           [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! EQ              [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! LT              [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! GT              [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! LTE             [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! GTE             [ reduce using rule 83 (expression_binop -> expression OR expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 118

    (39) statement_print -> PRINT LPAREN expression . RPAREN SEMICOLON
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RPAREN          shift and go to state 133
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 119

    (84) expression_group -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    DOT             reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    LBRAC           reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    EQ              reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    LT              reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    GT              reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    LTE             reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    GTE             reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    AND             reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    OR              reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    RBRAC           reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 84 (expression_group -> LPAREN expression RPAREN .)


state 120

    (40) statement_assignment -> variable ASSIGN expression . SEMICOLON
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    SEMICOLON       shift and go to state 134
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 121

    (44) statement_ifthenelse -> IF LPAREN expression . RPAREN statement ELSE statement
    (45) statement_ifthen -> IF LPAREN expression . RPAREN statement
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 122

    (46) statement_while -> WHILE LPAREN expression . RPAREN statement
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 123

    (49) statement_compound -> LCURL body RCURL .

    RETURN          reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    PRINT           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    IF              reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    WHILE           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    LCURL           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    BREAK           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    IDENT           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    INT             reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    BOOL            reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    LPAREN          reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    NOT             reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    MINUS           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    NEW             reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    $end            reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    RCURL           reduce using rule 49 (statement_compound -> LCURL body RCURL .)
    ELSE            reduce using rule 49 (statement_compound -> LCURL body RCURL .)


state 124

    (66) expression_call -> IDENT LPAREN optional_expression_list . RPAREN

    RPAREN          shift and go to state 137


state 125

    (67) optional_expression_list -> empty .

    RPAREN          reduce using rule 67 (optional_expression_list -> empty .)


state 126

    (68) optional_expression_list -> expression_list .

    RPAREN          reduce using rule 68 (optional_expression_list -> expression_list .)


state 127

    (69) expression_list -> expression .
    (70) expression_list -> expression . COMMA expression_list
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RPAREN          reduce using rule 69 (expression_list -> expression .)
    COMMA           shift and go to state 138
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 128

    (86) expression_new -> NEW variable_type LBRAC . expression RBRAC
    (17) variable_type -> variable_type LBRAC . RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    RBRAC           shift and go to state 99
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 139
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 129

    (24) function -> FUNCTION variable_type IDENT LPAREN . optional_parameter_list RPAREN LCURL body RCURL
    (25) optional_parameter_list -> . empty
    (26) optional_parameter_list -> . parameter_list
    (2) empty -> .
    (27) parameter_list -> . variable_type IDENT
    (28) parameter_list -> . variable_type IDENT COMMA parameter_list
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    RPAREN          reduce using rule 2 (empty -> .)
    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 140
    optional_parameter_list        shift and go to state 141
    empty                          shift and go to state 142
    parameter_list                 shift and go to state 143

state 130

    (12) variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .

    FUNCTION        reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    RETURN          reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    PRINT           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    IF              reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    WHILE           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    LCURL           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    BREAK           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    IDENT           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    INT             reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    BOOL            reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    LPAREN          reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    NOT             reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    MINUS           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    NEW             reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)
    RCURL           reduce using rule 12 (variables_declaration_list -> VAR variable_type variables_list SEMICOLON variables_declaration_list .)


state 131

    (19) variables_list -> IDENT COMMA variables_list .

    SEMICOLON       reduce using rule 19 (variables_list -> IDENT COMMA variables_list .)


state 132

    (43) variable -> expression LBRAC expression RBRAC .

    ASSIGN          reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    SEMICOLON       reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    DOT             reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    LBRAC           reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    PLUS            reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    MINUS           reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    MULTIPLY        reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    DIVIDE          reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    MODULO          reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    EQ              reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    NEQ             reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    LT              reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    GT              reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    LTE             reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    GTE             reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    AND             reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    OR              reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    RPAREN          reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    RBRAC           reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)
    COMMA           reduce using rule 43 (variable -> expression LBRAC expression RBRAC .)


state 133

    (39) statement_print -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 144


state 134

    (40) statement_assignment -> variable ASSIGN expression SEMICOLON .

    RETURN          reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    LCURL           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    IDENT           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    INT             reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    NEW             reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    $end            reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    RCURL           reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 40 (statement_assignment -> variable ASSIGN expression SEMICOLON .)


state 135

    (44) statement_ifthenelse -> IF LPAREN expression RPAREN . statement ELSE statement
    (45) statement_ifthen -> IF LPAREN expression RPAREN . statement
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthenelse
    (33) statement -> . statement_ifthen
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement -> . statement_expression
    (38) statement_return -> . RETURN expression SEMICOLON
    (39) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (40) statement_assignment -> . variable ASSIGN expression SEMICOLON
    (44) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (46) statement_while -> . WHILE LPAREN expression RPAREN statement
    (49) statement_compound -> . LCURL body RCURL
    (47) statement_break -> . BREAK SEMICOLON
    (48) statement_expression -> . expression SEMICOLON
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC

    RETURN          shift and go to state 36
    PRINT           shift and go to state 38
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    LCURL           shift and go to state 43
    BREAK           shift and go to state 44
    IDENT           shift and go to state 45
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 37
    statement                      shift and go to state 145
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthenelse           shift and go to state 30
    statement_ifthen               shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34
    statement_expression           shift and go to state 35
    variable                       shift and go to state 40
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54

state 136

    (46) statement_while -> WHILE LPAREN expression RPAREN . statement
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthenelse
    (33) statement -> . statement_ifthen
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement -> . statement_expression
    (38) statement_return -> . RETURN expression SEMICOLON
    (39) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (40) statement_assignment -> . variable ASSIGN expression SEMICOLON
    (44) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (46) statement_while -> . WHILE LPAREN expression RPAREN statement
    (49) statement_compound -> . LCURL body RCURL
    (47) statement_break -> . BREAK SEMICOLON
    (48) statement_expression -> . expression SEMICOLON
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC

    RETURN          shift and go to state 36
    PRINT           shift and go to state 38
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    LCURL           shift and go to state 43
    BREAK           shift and go to state 44
    IDENT           shift and go to state 45
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 37
    statement                      shift and go to state 146
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthenelse           shift and go to state 30
    statement_ifthen               shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34
    statement_expression           shift and go to state 35
    variable                       shift and go to state 40
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54

state 137

    (66) expression_call -> IDENT LPAREN optional_expression_list RPAREN .

    SEMICOLON       reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    DOT             reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LBRAC           reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    PLUS            reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MINUS           reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MULTIPLY        reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    DIVIDE          reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MODULO          reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    EQ              reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    NEQ             reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LT              reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    GT              reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LTE             reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    GTE             reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    AND             reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    OR              reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    RPAREN          reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    RBRAC           reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    COMMA           reduce using rule 66 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)


state 138

    (70) expression_list -> expression COMMA . expression_list
    (69) expression_list -> . expression
    (70) expression_list -> . expression COMMA expression_list
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC

    INT             shift and go to state 55
    BOOL            shift and go to state 56
    IDENT           shift and go to state 69
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 127
    expression_list                shift and go to state 147
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54
    variable                       shift and go to state 68

state 139

    (86) expression_new -> NEW variable_type LBRAC expression . RBRAC
    (71) expression_binop -> expression . PLUS expression
    (72) expression_binop -> expression . MINUS expression
    (73) expression_binop -> expression . MULTIPLY expression
    (74) expression_binop -> expression . DIVIDE expression
    (75) expression_binop -> expression . MODULO expression
    (76) expression_binop -> expression . EQ expression
    (77) expression_binop -> expression . NEQ expression
    (78) expression_binop -> expression . LT expression
    (79) expression_binop -> expression . GT expression
    (80) expression_binop -> expression . LTE expression
    (81) expression_binop -> expression . GTE expression
    (82) expression_binop -> expression . AND expression
    (83) expression_binop -> expression . OR expression
    (42) variable -> expression . DOT IDENT
    (43) variable -> expression . LBRAC expression RBRAC

    RBRAC           shift and go to state 148
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EQ              shift and go to state 78
    NEQ             shift and go to state 79
    LT              shift and go to state 80
    GT              shift and go to state 81
    LTE             shift and go to state 82
    GTE             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    DOT             shift and go to state 71
    LBRAC           shift and go to state 72


state 140

    (27) parameter_list -> variable_type . IDENT
    (28) parameter_list -> variable_type . IDENT COMMA parameter_list
    (17) variable_type -> variable_type . LBRAC RBRAC

    IDENT           shift and go to state 149
    LBRAC           shift and go to state 63


state 141

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list . RPAREN LCURL body RCURL

    RPAREN          shift and go to state 150


state 142

    (25) optional_parameter_list -> empty .

    RPAREN          reduce using rule 25 (optional_parameter_list -> empty .)


state 143

    (26) optional_parameter_list -> parameter_list .

    RPAREN          reduce using rule 26 (optional_parameter_list -> parameter_list .)


state 144

    (39) statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .

    RETURN          reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LCURL           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENT           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RCURL           reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 39 (statement_print -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 145

    (44) statement_ifthenelse -> IF LPAREN expression RPAREN statement . ELSE statement
    (45) statement_ifthen -> IF LPAREN expression RPAREN statement .

    ELSE            shift and go to state 151
    RETURN          reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    LCURL           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    IDENT           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    NEW             reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)
    RCURL           reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 45 (statement_ifthen -> IF LPAREN expression RPAREN statement .) ]


state 146

    (46) statement_while -> WHILE LPAREN expression RPAREN statement .

    RETURN          reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    LCURL           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    IDENT           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    NEW             reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    RCURL           reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 46 (statement_while -> WHILE LPAREN expression RPAREN statement .)


state 147

    (70) expression_list -> expression COMMA expression_list .

    RPAREN          reduce using rule 70 (expression_list -> expression COMMA expression_list .)


state 148

    (86) expression_new -> NEW variable_type LBRAC expression RBRAC .

    SEMICOLON       reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    DOT             reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    LBRAC           reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    PLUS            reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    MINUS           reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    MULTIPLY        reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    DIVIDE          reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    MODULO          reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    EQ              reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    NEQ             reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    LT              reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    GT              reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    LTE             reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    GTE             reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    AND             reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    OR              reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    RPAREN          reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    RBRAC           reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)
    COMMA           reduce using rule 86 (expression_new -> NEW variable_type LBRAC expression RBRAC .)


state 149

    (27) parameter_list -> variable_type IDENT .
    (28) parameter_list -> variable_type IDENT . COMMA parameter_list

    RPAREN          reduce using rule 27 (parameter_list -> variable_type IDENT .)
    COMMA           shift and go to state 152


state 150

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN . LCURL body RCURL

    LCURL           shift and go to state 153


state 151

    (44) statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE . statement
    (29) statement -> . statement_return
    (30) statement -> . statement_print
    (31) statement -> . statement_assignment
    (32) statement -> . statement_ifthenelse
    (33) statement -> . statement_ifthen
    (34) statement -> . statement_while
    (35) statement -> . statement_compound
    (36) statement -> . statement_break
    (37) statement -> . statement_expression
    (38) statement_return -> . RETURN expression SEMICOLON
    (39) statement_print -> . PRINT LPAREN expression RPAREN SEMICOLON
    (40) statement_assignment -> . variable ASSIGN expression SEMICOLON
    (44) statement_ifthenelse -> . IF LPAREN expression RPAREN statement ELSE statement
    (45) statement_ifthen -> . IF LPAREN expression RPAREN statement
    (46) statement_while -> . WHILE LPAREN expression RPAREN statement
    (49) statement_compound -> . LCURL body RCURL
    (47) statement_break -> . BREAK SEMICOLON
    (48) statement_expression -> . expression SEMICOLON
    (41) variable -> . IDENT
    (42) variable -> . expression DOT IDENT
    (43) variable -> . expression LBRAC expression RBRAC
    (52) expression -> . expression_integer
    (53) expression -> . expression_boolean
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_group
    (58) expression -> . expression_neg
    (59) expression -> . expression_negative
    (60) expression -> . expression_new
    (61) expression_integer -> . INT
    (62) expression_boolean -> . BOOL
    (65) expression_identifier -> . variable
    (66) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (71) expression_binop -> . expression PLUS expression
    (72) expression_binop -> . expression MINUS expression
    (73) expression_binop -> . expression MULTIPLY expression
    (74) expression_binop -> . expression DIVIDE expression
    (75) expression_binop -> . expression MODULO expression
    (76) expression_binop -> . expression EQ expression
    (77) expression_binop -> . expression NEQ expression
    (78) expression_binop -> . expression LT expression
    (79) expression_binop -> . expression GT expression
    (80) expression_binop -> . expression LTE expression
    (81) expression_binop -> . expression GTE expression
    (82) expression_binop -> . expression AND expression
    (83) expression_binop -> . expression OR expression
    (84) expression_group -> . LPAREN expression RPAREN
    (63) expression_neg -> . NOT expression
    (64) expression_negative -> . MINUS expression
    (85) expression_new -> . NEW variable_type
    (86) expression_new -> . NEW variable_type LBRAC expression RBRAC

    RETURN          shift and go to state 36
    PRINT           shift and go to state 38
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    LCURL           shift and go to state 43
    BREAK           shift and go to state 44
    IDENT           shift and go to state 45
    INT             shift and go to state 55
    BOOL            shift and go to state 56
    LPAREN          shift and go to state 39
    NOT             shift and go to state 58
    MINUS           shift and go to state 57
    NEW             shift and go to state 59

    expression                     shift and go to state 37
    statement                      shift and go to state 154
    statement_return               shift and go to state 27
    statement_print                shift and go to state 28
    statement_assignment           shift and go to state 29
    statement_ifthenelse           shift and go to state 30
    statement_ifthen               shift and go to state 31
    statement_while                shift and go to state 32
    statement_compound             shift and go to state 33
    statement_break                shift and go to state 34
    statement_expression           shift and go to state 35
    variable                       shift and go to state 40
    expression_integer             shift and go to state 46
    expression_boolean             shift and go to state 47
    expression_identifier          shift and go to state 48
    expression_call                shift and go to state 49
    expression_binop               shift and go to state 50
    expression_group               shift and go to state 51
    expression_neg                 shift and go to state 52
    expression_negative            shift and go to state 53
    expression_new                 shift and go to state 54

state 152

    (28) parameter_list -> variable_type IDENT COMMA . parameter_list
    (27) parameter_list -> . variable_type IDENT
    (28) parameter_list -> . variable_type IDENT COMMA parameter_list
    (13) variable_type -> . _BOOL
    (14) variable_type -> . _INT
    (15) variable_type -> . NULL
    (16) variable_type -> . IDENT
    (17) variable_type -> . variable_type LBRAC RBRAC

    _BOOL           shift and go to state 20
    _INT            shift and go to state 21
    NULL            shift and go to state 22
    IDENT           shift and go to state 23

    variable_type                  shift and go to state 140
    parameter_list                 shift and go to state 155

state 153

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL . body RCURL
    (3) body -> . optional_class_declaration_list optional_variables_declaration_list optional_functions_declaration_list statement_list
    (4) optional_class_declaration_list -> . empty
    (5) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (6) class_declaration_list -> . class_declaration
    (7) class_declaration_list -> . class_declaration class_declaration_list
    (8) class_declaration -> . CLASS IDENT LCURL variables_declaration_list RCURL

    VAR             reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    LPAREN          reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 7

    body                           shift and go to state 156
    optional_class_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    class_declaration_list         shift and go to state 5
    class_declaration              shift and go to state 6

state 154

    (44) statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .

    RETURN          reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    LCURL           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENT           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    NEW             reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    RCURL           reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 44 (statement_ifthenelse -> IF LPAREN expression RPAREN statement ELSE statement .)


state 155

    (28) parameter_list -> variable_type IDENT COMMA parameter_list .

    RPAREN          reduce using rule 28 (parameter_list -> variable_type IDENT COMMA parameter_list .)


state 156

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body . RCURL

    RCURL           shift and go to state 157


state 157

    (24) function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .

    FUNCTION        reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    RETURN          reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    PRINT           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    IF              reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    WHILE           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    LCURL           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    BREAK           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    IDENT           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    INT             reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    BOOL            reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    LPAREN          reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    NOT             reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    MINUS           reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    NEW             reduce using rule 24 (function -> FUNCTION variable_type IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)

